
xmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001498  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00802000  00001498  0000152c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000113  0080201e  0080201e  0000154a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000154a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000588e  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ba8  00000000  00000000  00006fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000105b  00000000  00000000  0000ab86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  0000bbe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003269  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013c7  00000000  00000000  0000f2e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000106a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      48:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      6c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_34>
      8c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      90:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      94:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      98:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      9c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      dc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      fc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     100:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     104:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     108:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     10c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     110:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     114:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     118:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     11c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     120:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     124:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     128:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     12c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     130:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     134:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     138:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     13c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     140:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     144:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     148:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     14c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     150:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     154:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     158:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     15c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     160:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     164:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     168:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     16c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     170:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     174:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     178:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     17c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     180:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     184:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     188:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     18c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     190:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     194:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     198:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     19c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1dc:	0c 94 3b 02 	jmp	0x476	; 0x476 <__vector_119>
     1e0:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__vector_120>
     1e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 32 02 	jmp	0x464	; 0x464 <uart_fgetc>
     200:	0c 94 1a 02 	jmp	0x434	; 0x434 <uart_fputc>

00000204 <__ctors_end>:
     204:	11 24       	eor	r1, r1
     206:	1f be       	out	0x3f, r1	; 63
     208:	cf ef       	ldi	r28, 0xFF	; 255
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	df e5       	ldi	r29, 0x5F	; 95
     20e:	de bf       	out	0x3e, r29	; 62
     210:	00 e0       	ldi	r16, 0x00	; 0
     212:	0c bf       	out	0x3c, r16	; 60

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e8 e9       	ldi	r30, 0x98	; 152
     21c:	f4 e1       	ldi	r31, 0x14	; 20
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	ae 31       	cpi	r26, 0x1E	; 30
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>

0000022e <__do_clear_bss>:
     22e:	21 e2       	ldi	r18, 0x21	; 33
     230:	ae e1       	ldi	r26, 0x1E	; 30
     232:	b0 e2       	ldi	r27, 0x20	; 32
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	a1 33       	cpi	r26, 0x31	; 49
     23a:	b2 07       	cpc	r27, r18
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <main>
     242:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <init_accelerometer>:
#include "stream.h"
#include "spi.h"


uint8_t init_accelerometer(void) {
	PORTA.DIR &= ~(PIN0_bm | PIN1_bm);
     24a:	e0 e0       	ldi	r30, 0x00	; 0
     24c:	f6 e0       	ldi	r31, 0x06	; 6
     24e:	80 81       	ld	r24, Z
     250:	8c 7f       	andi	r24, 0xFC	; 252
     252:	80 83       	st	Z, r24
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     254:	e0 e0       	ldi	r30, 0x00	; 0
     256:	f2 e0       	ldi	r31, 0x02	; 2
     258:	85 e0       	ldi	r24, 0x05	; 5
     25a:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc | ADC_CH_MUXNEG_GND_MODE3_gc;
     25c:	8d e0       	ldi	r24, 0x0D	; 13
     25e:	81 a7       	std	Z+41, r24	; 0x29
	
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_DIFF_gc;
     260:	82 e0       	ldi	r24, 0x02	; 2
     262:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH1.CTRL = ADC_CH_INPUTMODE_DIFF_gc;
     264:	80 a7       	std	Z+40, r24	; 0x28
	
	ADCA.REFCTRL = ADC_REFSEL_INTVCC_gc;
     266:	80 e1       	ldi	r24, 0x10	; 16
     268:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm;// | ADC_FREERUN_bm;
     26a:	81 83       	std	Z+1, r24	; 0x01
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;
     26c:	83 e0       	ldi	r24, 0x03	; 3
     26e:	84 83       	std	Z+4, r24	; 0x04
	
	ADCA.CTRLA = ADC_ENABLE_bm;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	80 83       	st	Z, r24
	
	return 0;
}
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	08 95       	ret

00000278 <read_adc>:


uint16_t read_adc(uint8_t channel) {
	int16_t res = 0;
	
	switch (channel) {
     278:	88 23       	and	r24, r24
     27a:	19 f0       	breq	.+6      	; 0x282 <read_adc+0xa>
     27c:	81 30       	cpi	r24, 0x01	; 1
     27e:	89 f0       	breq	.+34     	; 0x2a2 <read_adc+0x2a>
     280:	20 c0       	rjmp	.+64     	; 0x2c2 <read_adc+0x4a>
		case 0:
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
     282:	e0 e0       	ldi	r30, 0x00	; 0
     284:	f2 e0       	ldi	r31, 0x02	; 2
     286:	80 a1       	ldd	r24, Z+32	; 0x20
     288:	80 68       	ori	r24, 0x80	; 128
     28a:	80 a3       	std	Z+32, r24	; 0x20
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
     28c:	83 a1       	ldd	r24, Z+35	; 0x23
     28e:	80 ff       	sbrs	r24, 0
     290:	fd cf       	rjmp	.-6      	; 0x28c <read_adc+0x14>
		res = ADCA.CH0.RES;
     292:	e0 e0       	ldi	r30, 0x00	; 0
     294:	f2 e0       	ldi	r31, 0x02	; 2
     296:	24 a1       	ldd	r18, Z+36	; 0x24
     298:	35 a1       	ldd	r19, Z+37	; 0x25
		ADCA.CH0.INTFLAGS |= ADC_CH_CHIF_bm;
     29a:	83 a1       	ldd	r24, Z+35	; 0x23
     29c:	81 60       	ori	r24, 0x01	; 1
     29e:	83 a3       	std	Z+35, r24	; 0x23
		break;
     2a0:	12 c0       	rjmp	.+36     	; 0x2c6 <read_adc+0x4e>
		
		case 1:
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
     2a2:	e0 e0       	ldi	r30, 0x00	; 0
     2a4:	f2 e0       	ldi	r31, 0x02	; 2
     2a6:	80 a5       	ldd	r24, Z+40	; 0x28
     2a8:	80 68       	ori	r24, 0x80	; 128
     2aa:	80 a7       	std	Z+40, r24	; 0x28
		while(!(ADCA.CH1.INTFLAGS & ADC_CH_CHIF_bm));
     2ac:	83 a5       	ldd	r24, Z+43	; 0x2b
     2ae:	80 ff       	sbrs	r24, 0
     2b0:	fd cf       	rjmp	.-6      	; 0x2ac <read_adc+0x34>
		res = ADCA.CH1.RES;
     2b2:	e0 e0       	ldi	r30, 0x00	; 0
     2b4:	f2 e0       	ldi	r31, 0x02	; 2
     2b6:	24 a5       	ldd	r18, Z+44	; 0x2c
     2b8:	35 a5       	ldd	r19, Z+45	; 0x2d
		ADCA.CH1.INTFLAGS |= ADC_CH_CHIF_bm;
     2ba:	83 a5       	ldd	r24, Z+43	; 0x2b
     2bc:	81 60       	ori	r24, 0x01	; 1
     2be:	83 a7       	std	Z+43, r24	; 0x2b
		break;
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <read_adc+0x4e>
	return 0;
}


uint16_t read_adc(uint8_t channel) {
	int16_t res = 0;
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
	
	if(res < 0) {
		res *= -1;	
	}
	
	return (uint16_t)res;
     2c6:	c9 01       	movw	r24, r18
     2c8:	99 23       	and	r25, r25
     2ca:	24 f4       	brge	.+8      	; 0x2d4 <read_adc+0x5c>
     2cc:	88 27       	eor	r24, r24
     2ce:	99 27       	eor	r25, r25
     2d0:	82 1b       	sub	r24, r18
     2d2:	93 0b       	sbc	r25, r19
}
     2d4:	08 95       	ret

000002d6 <main>:

int main(void)
{
	//Config32MHzClock_Ext16M();
	
	PORTF.DIR |= PIN0_bm;
     2d6:	c0 ea       	ldi	r28, 0xA0	; 160
     2d8:	d6 e0       	ldi	r29, 0x06	; 6
     2da:	88 81       	ld	r24, Y
     2dc:	81 60       	ori	r24, 0x01	; 1
     2de:	88 83       	st	Y, r24
	
	cli();
     2e0:	f8 94       	cli
	init_accelerometer();
     2e2:	0e 94 25 01 	call	0x24a	; 0x24a <init_accelerometer>
	init_spi();
     2e6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <init_spi>

	init_stream(F_CPU);
     2ea:	60 e8       	ldi	r22, 0x80	; 128
     2ec:	74 e8       	ldi	r23, 0x84	; 132
     2ee:	8e e1       	ldi	r24, 0x1E	; 30
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 8f 02 	call	0x51e	; 0x51e <init_stream>
	sei();
     2f6:	78 94       	sei
	
	clear_screen();
     2f8:	8e e0       	ldi	r24, 0x0E	; 14
     2fa:	90 e2       	ldi	r25, 0x20	; 32
     2fc:	9f 93       	push	r25
     2fe:	8f 93       	push	r24
     300:	0e 94 52 07 	call	0xea4	; 0xea4 <printf>
	
	printf("hi\r\n");
     304:	8a e1       	ldi	r24, 0x1A	; 26
     306:	90 e2       	ldi	r25, 0x20	; 32
     308:	0e 94 66 07 	call	0xecc	; 0xecc <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30c:	2f e7       	ldi	r18, 0x7F	; 127
     30e:	8a e1       	ldi	r24, 0x1A	; 26
     310:	96 e0       	ldi	r25, 0x06	; 6
     312:	21 50       	subi	r18, 0x01	; 1
     314:	80 40       	sbci	r24, 0x00	; 0
     316:	90 40       	sbci	r25, 0x00	; 0
     318:	e1 f7       	brne	.-8      	; 0x312 <main+0x3c>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x46>
     31c:	00 00       	nop
	_delay_ms(1000);
	
	PORTF.DIR = 0xFF;
     31e:	8f ef       	ldi	r24, 0xFF	; 255
     320:	88 83       	st	Y, r24
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
	
    while (1) 
    {
		uint16_t accres = 0x0000;
     326:	c0 e0       	ldi	r28, 0x00	; 0
     328:	d0 e0       	ldi	r29, 0x00	; 0
		
		for(uint16_t id=0; id<2; id++) {
			//wait for chip select to go low
			while(getCS()) {
     32a:	0e 94 16 02 	call	0x42c	; 0x42c <getCS>
     32e:	88 23       	and	r24, r24
     330:	29 f0       	breq	.+10     	; 0x33c <main+0x66>
				accres = read_adc(id);
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	0e 94 3c 01 	call	0x278	; 0x278 <read_adc>
     338:	ec 01       	movw	r28, r24
     33a:	f7 cf       	rjmp	.-18     	; 0x32a <main+0x54>
			}
			
			//transmit data + id
			spi_tx(accres | (id << 12));
     33c:	ce 01       	movw	r24, r28
     33e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <spi_tx>
			
			//wait for chip select to go high
			while(!getCS());
     342:	0e 94 16 02 	call	0x42c	; 0x42c <getCS>
     346:	88 23       	and	r24, r24
     348:	e1 f3       	breq	.-8      	; 0x342 <main+0x6c>
     34a:	04 c0       	rjmp	.+8      	; 0x354 <main+0x7e>
		uint16_t accres = 0x0000;
		
		for(uint16_t id=0; id<2; id++) {
			//wait for chip select to go low
			while(getCS()) {
				accres = read_adc(id);
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 3c 01 	call	0x278	; 0x278 <read_adc>
     352:	ec 01       	movw	r28, r24
    {
		uint16_t accres = 0x0000;
		
		for(uint16_t id=0; id<2; id++) {
			//wait for chip select to go low
			while(getCS()) {
     354:	0e 94 16 02 	call	0x42c	; 0x42c <getCS>
     358:	81 11       	cpse	r24, r1
     35a:	f8 cf       	rjmp	.-16     	; 0x34c <main+0x76>
				accres = read_adc(id);
			}
			
			//transmit data + id
			spi_tx(accres | (id << 12));
     35c:	ce 01       	movw	r24, r28
     35e:	90 61       	ori	r25, 0x10	; 16
     360:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <spi_tx>
			
			//wait for chip select to go high
			while(!getCS());
     364:	0e 94 16 02 	call	0x42c	; 0x42c <getCS>
     368:	88 23       	and	r24, r24
     36a:	e1 f3       	breq	.-8      	; 0x364 <main+0x8e>
     36c:	dc cf       	rjmp	.-72     	; 0x326 <main+0x50>

0000036e <__vector_34>:
#include <avr/interrupt.h>

volatile uint8_t clkedge = 0;
volatile uint8_t update = 0;

ISR(PORTB_INT0_vect) {
     36e:	1f 92       	push	r1
     370:	0f 92       	push	r0
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	0f 92       	push	r0
     376:	11 24       	eor	r1, r1
     378:	8f 93       	push	r24
	if(SPI.IN & SPI_CLK) {
     37a:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     37e:	84 ff       	sbrs	r24, 4
     380:	04 c0       	rjmp	.+8      	; 0x38a <__vector_34+0x1c>
		clkedge = 1;
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	80 93 1f 20 	sts	0x201F, r24	; 0x80201f <clkedge>
     388:	02 c0       	rjmp	.+4      	; 0x38e <__vector_34+0x20>
		//PORTF.OUTSET = PIN1_bm;
	} else {
		clkedge = 0;
     38a:	10 92 1f 20 	sts	0x201F, r1	; 0x80201f <clkedge>
		//PORTF.OUTCLR = PIN1_bm;
	}
	update = 1;
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <__data_end>
}
     394:	8f 91       	pop	r24
     396:	0f 90       	pop	r0
     398:	0f be       	out	0x3f, r0	; 63
     39a:	0f 90       	pop	r0
     39c:	1f 90       	pop	r1
     39e:	18 95       	reti

000003a0 <init_spi>:


void init_spi(void) {
	SPI.OUTCLR = SPI_MISO;
     3a0:	e0 e2       	ldi	r30, 0x20	; 32
     3a2:	f6 e0       	ldi	r31, 0x06	; 6
     3a4:	82 e0       	ldi	r24, 0x02	; 2
     3a6:	86 83       	std	Z+6, r24	; 0x06
	SPI.DIRCLR = SPI_CS | SPI_CLK;
     3a8:	91 e1       	ldi	r25, 0x11	; 17
     3aa:	92 83       	std	Z+2, r25	; 0x02
	SPI.DIRSET = SPI_MISO;
     3ac:	81 83       	std	Z+1, r24	; 0x01
	/*
	SPI.PIN0CTRL |= PORT_OPC_PULLUP_gc;
	SPI.PIN1CTRL |= PORT_OPC_PULLDOWN_gc;
	*/
	
	cli();
     3ae:	f8 94       	cli
	
	SPI.INT0MASK = PIN4_bm;
     3b0:	80 e1       	ldi	r24, 0x10	; 16
     3b2:	82 87       	std	Z+10, r24	; 0x0a
	SPI.PIN4CTRL = PORT_ISC_BOTHEDGES_gc | PORT_OPC_PULLDOWN_gc;
     3b4:	84 8b       	std	Z+20, r24	; 0x14
	SPI.INTCTRL = PORT_INT0LVL_LO_gc;
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	81 87       	std	Z+9, r24	; 0x09
	
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     3ba:	e0 ea       	ldi	r30, 0xA0	; 160
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	82 81       	ldd	r24, Z+2	; 0x02
     3c0:	81 60       	ori	r24, 0x01	; 1
     3c2:	82 83       	std	Z+2, r24	; 0x02
	sei();
     3c4:	78 94       	sei
     3c6:	08 95       	ret

000003c8 <spi_tx>:
}


void spi_tx(uint16_t data) {
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24
     3ce:	20 e1       	ldi	r18, 0x10	; 16
     3d0:	30 e0       	ldi	r19, 0x00	; 0
	//send data
	for(uint16_t i=0x8000; i!=0; i>>=1) {
     3d2:	40 e0       	ldi	r20, 0x00	; 0
     3d4:	50 e8       	ldi	r21, 0x80	; 128
	}
}


uint8_t getCS(void) {
	return (SPI.IN & SPI_CS);
     3d6:	e0 e2       	ldi	r30, 0x20	; 32
     3d8:	f6 e0       	ldi	r31, 0x06	; 6
		
		if(clkedge) {
			if(data & i) {
				SPI.OUTSET = SPI_MISO;
			} else {
				SPI.OUTCLR = SPI_MISO;
     3da:	a2 e0       	ldi	r26, 0x02	; 2
     3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <spi_tx+0x1c>
	}
}


uint8_t getCS(void) {
	return (SPI.IN & SPI_CS);
     3de:	90 85       	ldd	r25, Z+8	; 0x08

void spi_tx(uint16_t data) {
	//send data
	for(uint16_t i=0x8000; i!=0; i>>=1) {
		while(!update) {
			if(getCS()) {
     3e0:	90 fd       	sbrc	r25, 0
     3e2:	04 c0       	rjmp	.+8      	; 0x3ec <spi_tx+0x24>


void spi_tx(uint16_t data) {
	//send data
	for(uint16_t i=0x8000; i!=0; i>>=1) {
		while(!update) {
     3e4:	90 91 1e 20 	lds	r25, 0x201E	; 0x80201e <__data_end>
     3e8:	99 23       	and	r25, r25
     3ea:	c9 f3       	breq	.-14     	; 0x3de <spi_tx+0x16>
			if(getCS()) {
				break;
			}
		}
		update = 0;
     3ec:	10 92 1e 20 	sts	0x201E, r1	; 0x80201e <__data_end>
		
		if(clkedge) {
     3f0:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <clkedge>
     3f4:	99 23       	and	r25, r25
     3f6:	61 f0       	breq	.+24     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			if(data & i) {
     3f8:	be 01       	movw	r22, r28
     3fa:	64 23       	and	r22, r20
     3fc:	75 23       	and	r23, r21
     3fe:	67 2b       	or	r22, r23
     400:	11 f0       	breq	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
				SPI.OUTSET = SPI_MISO;
     402:	a5 83       	std	Z+5, r26	; 0x05
     404:	05 c0       	rjmp	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			} else {
				SPI.OUTCLR = SPI_MISO;
     406:	a6 83       	std	Z+6, r26	; 0x06
     408:	03 c0       	rjmp	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	}
}


uint8_t getCS(void) {
	return (SPI.IN & SPI_CS);
     40a:	90 85       	ldd	r25, Z+8	; 0x08
				SPI.OUTCLR = SPI_MISO;
			}
		}
		
		while(!update) {
			if(getCS()) {
     40c:	90 fd       	sbrc	r25, 0
     40e:	04 c0       	rjmp	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			} else {
				SPI.OUTCLR = SPI_MISO;
			}
		}
		
		while(!update) {
     410:	90 91 1e 20 	lds	r25, 0x201E	; 0x80201e <__data_end>
     414:	99 23       	and	r25, r25
     416:	c9 f3       	breq	.-14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			if(getCS()) {
				break;
			}
		}
		update = 0;
     418:	10 92 1e 20 	sts	0x201E, r1	; 0x80201e <__data_end>
}


void spi_tx(uint16_t data) {
	//send data
	for(uint16_t i=0x8000; i!=0; i>>=1) {
     41c:	56 95       	lsr	r21
     41e:	47 95       	ror	r20
     420:	21 50       	subi	r18, 0x01	; 1
     422:	31 09       	sbc	r19, r1
     424:	f9 f6       	brne	.-66     	; 0x3e4 <spi_tx+0x1c>
				break;
			}
		}
		update = 0;
	}
}
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <getCS>:


uint8_t getCS(void) {
	return (SPI.IN & SPI_CS);
     42c:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
     430:	81 70       	andi	r24, 0x01	; 1
     432:	08 95       	ret

00000434 <uart_fputc>:
 *  \param  stream  file pointer
 *
 *  \return always zero
 */
int uart_fputc(char c, FILE *stream)
{
     434:	cf 93       	push	r28
     436:	c8 2f       	mov	r28, r24
  while( ! USART_TXBuffer_FreeSpace(&uartF0) );
     438:	80 e2       	ldi	r24, 0x20	; 32
     43a:	90 e2       	ldi	r25, 0x20	; 32
     43c:	0e 94 6f 04 	call	0x8de	; 0x8de <USART_TXBuffer_FreeSpace>
     440:	88 23       	and	r24, r24
     442:	d1 f3       	breq	.-12     	; 0x438 <uart_fputc+0x4>

  if (c == '\n') uart_putc(&uartF0, '\r');
     444:	ca 30       	cpi	r28, 0x0A	; 10
     446:	29 f4       	brne	.+10     	; 0x452 <uart_fputc+0x1e>
     448:	6d e0       	ldi	r22, 0x0D	; 13
     44a:	80 e2       	ldi	r24, 0x20	; 32
     44c:	90 e2       	ldi	r25, 0x20	; 32
     44e:	0e 94 c6 02 	call	0x58c	; 0x58c <uart_putc>
  uart_putc(&uartF0, c);
     452:	6c 2f       	mov	r22, r28
     454:	80 e2       	ldi	r24, 0x20	; 32
     456:	90 e2       	ldi	r25, 0x20	; 32
     458:	0e 94 c6 02 	call	0x58c	; 0x58c <uart_putc>

  return 0;
}
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <uart_fgetc>:
 */
int uart_fgetc(FILE * stream)
{
  int c;

  while ( (c = uart_getc(&uartF0)) == UART_NO_DATA) ;
     464:	80 e2       	ldi	r24, 0x20	; 32
     466:	90 e2       	ldi	r25, 0x20	; 32
     468:	0e 94 b5 02 	call	0x56a	; 0x56a <uart_getc>
     46c:	81 15       	cp	r24, r1
     46e:	21 e0       	ldi	r18, 0x01	; 1
     470:	92 07       	cpc	r25, r18
     472:	c1 f3       	breq	.-16     	; 0x464 <uart_fgetc>

  return c;
}
     474:	08 95       	ret

00000476 <__vector_119>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTF0.
 *         This ISR is only defined if the macro ENABLE_UART_F0 is defined
 */
ISR(USARTF0_RXC_vect)
{
     476:	1f 92       	push	r1
     478:	0f 92       	push	r0
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	0f 92       	push	r0
     47e:	11 24       	eor	r1, r1
     480:	0b b6       	in	r0, 0x3b	; 59
     482:	0f 92       	push	r0
     484:	2f 93       	push	r18
     486:	3f 93       	push	r19
     488:	4f 93       	push	r20
     48a:	5f 93       	push	r21
     48c:	6f 93       	push	r22
     48e:	7f 93       	push	r23
     490:	8f 93       	push	r24
     492:	9f 93       	push	r25
     494:	af 93       	push	r26
     496:	bf 93       	push	r27
     498:	ef 93       	push	r30
     49a:	ff 93       	push	r31
  USART_RXComplete(&uartF0);
     49c:	80 e2       	ldi	r24, 0x20	; 32
     49e:	90 e2       	ldi	r25, 0x20	; 32
     4a0:	0e 94 bc 04 	call	0x978	; 0x978 <USART_RXComplete>
}
     4a4:	ff 91       	pop	r31
     4a6:	ef 91       	pop	r30
     4a8:	bf 91       	pop	r27
     4aa:	af 91       	pop	r26
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	7f 91       	pop	r23
     4b2:	6f 91       	pop	r22
     4b4:	5f 91       	pop	r21
     4b6:	4f 91       	pop	r20
     4b8:	3f 91       	pop	r19
     4ba:	2f 91       	pop	r18
     4bc:	0f 90       	pop	r0
     4be:	0b be       	out	0x3b, r0	; 59
     4c0:	0f 90       	pop	r0
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	0f 90       	pop	r0
     4c6:	1f 90       	pop	r1
     4c8:	18 95       	reti

000004ca <__vector_120>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTF0.
 *         This ISR is only defined if the macro ENABLE_UART_F0 is defined
 */
ISR(USARTF0_DRE_vect)
{
     4ca:	1f 92       	push	r1
     4cc:	0f 92       	push	r0
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	0f 92       	push	r0
     4d2:	11 24       	eor	r1, r1
     4d4:	0b b6       	in	r0, 0x3b	; 59
     4d6:	0f 92       	push	r0
     4d8:	2f 93       	push	r18
     4da:	3f 93       	push	r19
     4dc:	4f 93       	push	r20
     4de:	5f 93       	push	r21
     4e0:	6f 93       	push	r22
     4e2:	7f 93       	push	r23
     4e4:	8f 93       	push	r24
     4e6:	9f 93       	push	r25
     4e8:	af 93       	push	r26
     4ea:	bf 93       	push	r27
     4ec:	ef 93       	push	r30
     4ee:	ff 93       	push	r31
  USART_DataRegEmpty(&uartF0);
     4f0:	80 e2       	ldi	r24, 0x20	; 32
     4f2:	90 e2       	ldi	r25, 0x20	; 32
     4f4:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <USART_DataRegEmpty>
}
     4f8:	ff 91       	pop	r31
     4fa:	ef 91       	pop	r30
     4fc:	bf 91       	pop	r27
     4fe:	af 91       	pop	r26
     500:	9f 91       	pop	r25
     502:	8f 91       	pop	r24
     504:	7f 91       	pop	r23
     506:	6f 91       	pop	r22
     508:	5f 91       	pop	r21
     50a:	4f 91       	pop	r20
     50c:	3f 91       	pop	r19
     50e:	2f 91       	pop	r18
     510:	0f 90       	pop	r0
     512:	0b be       	out	0x3b, r0	; 59
     514:	0f 90       	pop	r0
     516:	0f be       	out	0x3f, r0	; 63
     518:	0f 90       	pop	r0
     51a:	1f 90       	pop	r1
     51c:	18 95       	reti

0000051e <init_stream>:
 *  \param  fcpu  the clock frequency
 *
 *  \return void
 */
void init_stream(uint32_t fcpu)
{
     51e:	cf 92       	push	r12
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	9b 01       	movw	r18, r22
     52a:	ac 01       	movw	r20, r24
  init_uart(&uartF0, &USARTF0, fcpu, BAUD, CLK2X);
     52c:	c1 2c       	mov	r12, r1
     52e:	e1 2c       	mov	r14, r1
     530:	12 ec       	ldi	r17, 0xC2	; 194
     532:	f1 2e       	mov	r15, r17
     534:	01 e0       	ldi	r16, 0x01	; 1
     536:	10 e0       	ldi	r17, 0x00	; 0
     538:	60 ea       	ldi	r22, 0xA0	; 160
     53a:	7b e0       	ldi	r23, 0x0B	; 11
     53c:	80 e2       	ldi	r24, 0x20	; 32
     53e:	90 e2       	ldi	r25, 0x20	; 32
     540:	0e 94 00 04 	call	0x800	; 0x800 <init_uart>
  stdout = stdin = &uart_stdinout;
     544:	eb e2       	ldi	r30, 0x2B	; 43
     546:	f1 e2       	ldi	r31, 0x21	; 33
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e2       	ldi	r25, 0x20	; 32
     54c:	80 83       	st	Z, r24
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	82 83       	std	Z+2, r24	; 0x02
     552:	93 83       	std	Z+3, r25	; 0x03

  PMIC.CTRL |= PMIC_LOLVLEN_bm;           // Low level interrupt
     554:	e0 ea       	ldi	r30, 0xA0	; 160
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	82 81       	ldd	r24, Z+2	; 0x02
     55a:	81 60       	ori	r24, 0x01	; 1
     55c:	82 83       	std	Z+2, r24	; 0x02
}
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	ff 90       	pop	r15
     564:	ef 90       	pop	r14
     566:	cf 90       	pop	r12
     568:	08 95       	ret

0000056a <uart_getc>:
  char c;

  while ( (c = *s++) ) {
    uart_putc(uart, c);
  }
}
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	ec 01       	movw	r28, r24
     570:	0e 94 a3 04 	call	0x946	; 0x946 <USART_RXBufferData_Available>
     574:	88 23       	and	r24, r24
     576:	29 f0       	breq	.+10     	; 0x582 <uart_getc+0x18>
     578:	ce 01       	movw	r24, r28
     57a:	0e 94 ae 04 	call	0x95c	; 0x95c <USART_RXBuffer_GetByte>
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	02 c0       	rjmp	.+4      	; 0x586 <uart_getc+0x1c>
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	08 95       	ret

0000058c <uart_putc>:
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	ec 01       	movw	r28, r24
     594:	16 2f       	mov	r17, r22
     596:	0e 94 6f 04 	call	0x8de	; 0x8de <USART_TXBuffer_FreeSpace>
     59a:	88 23       	and	r24, r24
     59c:	21 f0       	breq	.+8      	; 0x5a6 <uart_putc+0x1a>
     59e:	61 2f       	mov	r22, r17
     5a0:	ce 01       	movw	r24, r28
     5a2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <USART_TXBuffer_PutByte>
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	08 95       	ret

000005ae <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     5ae:	80 3a       	cpi	r24, 0xA0	; 160
     5b0:	28 e0       	ldi	r18, 0x08	; 8
     5b2:	92 07       	cpc	r25, r18
     5b4:	39 f4       	brne	.+14     	; 0x5c4 <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     5b6:	e0 e4       	ldi	r30, 0x40	; 64
     5b8:	f6 e0       	ldi	r31, 0x06	; 6
     5ba:	88 e0       	ldi	r24, 0x08	; 8
     5bc:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     5be:	84 e0       	ldi	r24, 0x04	; 4
     5c0:	82 83       	std	Z+2, r24	; 0x02
     return;
     5c2:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     5c4:	80 3b       	cpi	r24, 0xB0	; 176
     5c6:	28 e0       	ldi	r18, 0x08	; 8
     5c8:	92 07       	cpc	r25, r18
     5ca:	39 f4       	brne	.+14     	; 0x5da <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     5cc:	e0 e4       	ldi	r30, 0x40	; 64
     5ce:	f6 e0       	ldi	r31, 0x06	; 6
     5d0:	80 e8       	ldi	r24, 0x80	; 128
     5d2:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     5d4:	80 e4       	ldi	r24, 0x40	; 64
     5d6:	82 83       	std	Z+2, r24	; 0x02
     return;
     5d8:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     5da:	80 3a       	cpi	r24, 0xA0	; 160
     5dc:	29 e0       	ldi	r18, 0x09	; 9
     5de:	92 07       	cpc	r25, r18
     5e0:	39 f4       	brne	.+14     	; 0x5f0 <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     5e2:	e0 e6       	ldi	r30, 0x60	; 96
     5e4:	f6 e0       	ldi	r31, 0x06	; 6
     5e6:	88 e0       	ldi	r24, 0x08	; 8
     5e8:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     5ea:	84 e0       	ldi	r24, 0x04	; 4
     5ec:	82 83       	std	Z+2, r24	; 0x02
     return;
     5ee:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     5f0:	80 3b       	cpi	r24, 0xB0	; 176
     5f2:	29 e0       	ldi	r18, 0x09	; 9
     5f4:	92 07       	cpc	r25, r18
     5f6:	39 f4       	brne	.+14     	; 0x606 <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     5f8:	e0 e6       	ldi	r30, 0x60	; 96
     5fa:	f6 e0       	ldi	r31, 0x06	; 6
     5fc:	80 e8       	ldi	r24, 0x80	; 128
     5fe:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     600:	80 e4       	ldi	r24, 0x40	; 64
     602:	82 83       	std	Z+2, r24	; 0x02
     return;
     604:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     606:	80 3a       	cpi	r24, 0xA0	; 160
     608:	2a e0       	ldi	r18, 0x0A	; 10
     60a:	92 07       	cpc	r25, r18
     60c:	39 f4       	brne	.+14     	; 0x61c <set_usart_txrx_direction+0x6e>
     PORTE.DIRSET      = PIN3_bm;
     60e:	e0 e8       	ldi	r30, 0x80	; 128
     610:	f6 e0       	ldi	r31, 0x06	; 6
     612:	88 e0       	ldi	r24, 0x08	; 8
     614:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     616:	84 e0       	ldi	r24, 0x04	; 4
     618:	82 83       	std	Z+2, r24	; 0x02
     return;
     61a:	08 95       	ret
   }
  #endif
  #ifdef USARTE1
   if ( (uint16_t) usart == (uint16_t) &USARTE1) {
     61c:	80 3b       	cpi	r24, 0xB0	; 176
     61e:	2a e0       	ldi	r18, 0x0A	; 10
     620:	92 07       	cpc	r25, r18
     622:	39 f4       	brne	.+14     	; 0x632 <set_usart_txrx_direction+0x84>
     PORTE.DIRSET      = PIN7_bm;
     624:	e0 e8       	ldi	r30, 0x80	; 128
     626:	f6 e0       	ldi	r31, 0x06	; 6
     628:	80 e8       	ldi	r24, 0x80	; 128
     62a:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN6_bm;
     62c:	80 e4       	ldi	r24, 0x40	; 64
     62e:	82 83       	std	Z+2, r24	; 0x02
     return;
     630:	08 95       	ret
   }
  #endif
  #ifdef USARTF0
   if ( (uint16_t) usart == (uint16_t) &USARTF0) {
     632:	80 3a       	cpi	r24, 0xA0	; 160
     634:	9b 40       	sbci	r25, 0x0B	; 11
     636:	31 f4       	brne	.+12     	; 0x644 <set_usart_txrx_direction+0x96>
     PORTF.DIRSET      = PIN3_bm;
     638:	e0 ea       	ldi	r30, 0xA0	; 160
     63a:	f6 e0       	ldi	r31, 0x06	; 6
     63c:	88 e0       	ldi	r24, 0x08	; 8
     63e:	81 83       	std	Z+1, r24	; 0x01
     PORTF.DIRCLR      = PIN2_bm;
     640:	84 e0       	ldi	r24, 0x04	; 4
     642:	82 83       	std	Z+2, r24	; 0x02
     644:	08 95       	ret

00000646 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     646:	4f 92       	push	r4
     648:	5f 92       	push	r5
     64a:	6f 92       	push	r6
     64c:	7f 92       	push	r7
     64e:	8f 92       	push	r8
     650:	9f 92       	push	r9
     652:	af 92       	push	r10
     654:	bf 92       	push	r11
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	49 01       	movw	r8, r18
     668:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     66a:	2e 2d       	mov	r18, r14
     66c:	21 70       	andi	r18, 0x01	; 1
     66e:	c0 e1       	ldi	r28, 0x10	; 16
     670:	d0 e0       	ldi	r29, 0x00	; 0
     672:	02 c0       	rjmp	.+4      	; 0x678 <calc_bsel+0x32>
     674:	d5 95       	asr	r29
     676:	c7 95       	ror	r28
     678:	2a 95       	dec	r18
     67a:	e2 f7       	brpl	.-8      	; 0x674 <calc_bsel+0x2e>
  if ( scale < 0 ) {
     67c:	00 23       	and	r16, r16
     67e:	0c f0       	brlt	.+2      	; 0x682 <calc_bsel+0x3c>
     680:	42 c0       	rjmp	.+132    	; 0x706 <calc_bsel+0xc0>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     682:	0e 94 0a 06 	call	0xc14	; 0xc14 <__floatunsisf>
     686:	6b 01       	movw	r12, r22
     688:	7c 01       	movw	r14, r24
     68a:	dd 27       	eor	r29, r29
     68c:	be 01       	movw	r22, r28
     68e:	dd 0f       	add	r29, r29
     690:	88 0b       	sbc	r24, r24
     692:	99 0b       	sbc	r25, r25
     694:	0e 94 0c 06 	call	0xc18	; 0xc18 <__floatsisf>
     698:	2b 01       	movw	r4, r22
     69a:	3c 01       	movw	r6, r24
     69c:	c5 01       	movw	r24, r10
     69e:	b4 01       	movw	r22, r8
     6a0:	0e 94 0a 06 	call	0xc14	; 0xc14 <__floatunsisf>
     6a4:	9b 01       	movw	r18, r22
     6a6:	ac 01       	movw	r20, r24
     6a8:	c3 01       	movw	r24, r6
     6aa:	b2 01       	movw	r22, r4
     6ac:	0e 94 98 06 	call	0xd30	; 0xd30 <__mulsf3>
     6b0:	9b 01       	movw	r18, r22
     6b2:	ac 01       	movw	r20, r24
     6b4:	c7 01       	movw	r24, r14
     6b6:	b6 01       	movw	r22, r12
     6b8:	0e 94 69 05 	call	0xad2	; 0xad2 <__divsf3>
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	40 e8       	ldi	r20, 0x80	; 128
     6c2:	5f e3       	ldi	r21, 0x3F	; 63
     6c4:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__subsf3>
     6c8:	6b 01       	movw	r12, r22
     6ca:	7c 01       	movw	r14, r24
     6cc:	11 27       	eor	r17, r17
     6ce:	01 95       	neg	r16
     6d0:	0c f4       	brge	.+2      	; 0x6d4 <calc_bsel+0x8e>
     6d2:	10 95       	com	r17
     6d4:	61 e0       	ldi	r22, 0x01	; 1
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <calc_bsel+0x98>
     6da:	66 0f       	add	r22, r22
     6dc:	77 1f       	adc	r23, r23
     6de:	0a 95       	dec	r16
     6e0:	e2 f7       	brpl	.-8      	; 0x6da <calc_bsel+0x94>
     6e2:	07 2e       	mov	r0, r23
     6e4:	00 0c       	add	r0, r0
     6e6:	88 0b       	sbc	r24, r24
     6e8:	99 0b       	sbc	r25, r25
     6ea:	0e 94 0c 06 	call	0xc18	; 0xc18 <__floatsisf>
     6ee:	9b 01       	movw	r18, r22
     6f0:	ac 01       	movw	r20, r24
     6f2:	c7 01       	movw	r24, r14
     6f4:	b6 01       	movw	r22, r12
     6f6:	0e 94 98 06 	call	0xd30	; 0xd30 <__mulsf3>
     6fa:	0e 94 05 07 	call	0xe0a	; 0xe0a <round>
     6fe:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__fixunssfsi>
     702:	cb 01       	movw	r24, r22
     704:	3e c0       	rjmp	.+124    	; 0x782 <calc_bsel+0x13c>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     706:	0e 94 0a 06 	call	0xc14	; 0xc14 <__floatunsisf>
     70a:	6b 01       	movw	r12, r22
     70c:	7c 01       	movw	r14, r24
     70e:	be 01       	movw	r22, r28
     710:	77 27       	eor	r23, r23
     712:	07 2e       	mov	r0, r23
     714:	00 0c       	add	r0, r0
     716:	88 0b       	sbc	r24, r24
     718:	99 0b       	sbc	r25, r25
     71a:	0e 94 0c 06 	call	0xc18	; 0xc18 <__floatsisf>
     71e:	2b 01       	movw	r4, r22
     720:	3c 01       	movw	r6, r24
     722:	c5 01       	movw	r24, r10
     724:	b4 01       	movw	r22, r8
     726:	0e 94 0a 06 	call	0xc14	; 0xc14 <__floatunsisf>
     72a:	9b 01       	movw	r18, r22
     72c:	ac 01       	movw	r20, r24
     72e:	c3 01       	movw	r24, r6
     730:	b2 01       	movw	r22, r4
     732:	0e 94 98 06 	call	0xd30	; 0xd30 <__mulsf3>
     736:	9b 01       	movw	r18, r22
     738:	ac 01       	movw	r20, r24
     73a:	c7 01       	movw	r24, r14
     73c:	b6 01       	movw	r22, r12
     73e:	0e 94 69 05 	call	0xad2	; 0xad2 <__divsf3>
     742:	6b 01       	movw	r12, r22
     744:	7c 01       	movw	r14, r24
     746:	61 e0       	ldi	r22, 0x01	; 1
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	02 c0       	rjmp	.+4      	; 0x750 <calc_bsel+0x10a>
     74c:	66 0f       	add	r22, r22
     74e:	77 1f       	adc	r23, r23
     750:	0a 95       	dec	r16
     752:	e2 f7       	brpl	.-8      	; 0x74c <calc_bsel+0x106>
     754:	07 2e       	mov	r0, r23
     756:	00 0c       	add	r0, r0
     758:	88 0b       	sbc	r24, r24
     75a:	99 0b       	sbc	r25, r25
     75c:	0e 94 0c 06 	call	0xc18	; 0xc18 <__floatsisf>
     760:	9b 01       	movw	r18, r22
     762:	ac 01       	movw	r20, r24
     764:	c7 01       	movw	r24, r14
     766:	b6 01       	movw	r22, r12
     768:	0e 94 69 05 	call	0xad2	; 0xad2 <__divsf3>
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	40 e8       	ldi	r20, 0x80	; 128
     772:	5f e3       	ldi	r21, 0x3F	; 63
     774:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__subsf3>
     778:	0e 94 05 07 	call	0xe0a	; 0xe0a <round>
     77c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__fixunssfsi>
     780:	cb 01       	movw	r24, r22
  }
}
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	df 90       	pop	r13
     790:	cf 90       	pop	r12
     792:	bf 90       	pop	r11
     794:	af 90       	pop	r10
     796:	9f 90       	pop	r9
     798:	8f 90       	pop	r8
     79a:	7f 90       	pop	r7
     79c:	6f 90       	pop	r6
     79e:	5f 90       	pop	r5
     7a0:	4f 90       	pop	r4
     7a2:	08 95       	ret

000007a4 <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     7a4:	4f 92       	push	r4
     7a6:	5f 92       	push	r5
     7a8:	6f 92       	push	r6
     7aa:	7f 92       	push	r7
     7ac:	8f 92       	push	r8
     7ae:	9f 92       	push	r9
     7b0:	af 92       	push	r10
     7b2:	bf 92       	push	r11
     7b4:	ef 92       	push	r14
     7b6:	0f 93       	push	r16
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	2b 01       	movw	r4, r22
     7be:	3c 01       	movw	r6, r24
     7c0:	49 01       	movw	r8, r18
     7c2:	5a 01       	movw	r10, r20
     7c4:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     7c6:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
     7c8:	ed 2e       	mov	r14, r29
     7ca:	0c 2f       	mov	r16, r28
     7cc:	a5 01       	movw	r20, r10
     7ce:	94 01       	movw	r18, r8
     7d0:	c3 01       	movw	r24, r6
     7d2:	b2 01       	movw	r22, r4
     7d4:	0e 94 23 03 	call	0x646	; 0x646 <calc_bsel>
     7d8:	81 15       	cp	r24, r1
     7da:	90 41       	sbci	r25, 0x10	; 16
     7dc:	18 f0       	brcs	.+6      	; 0x7e4 <calc_bscale+0x40>
     7de:	cf 5f       	subi	r28, 0xFF	; 255
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     7e0:	c8 30       	cpi	r28, 0x08	; 8
     7e2:	91 f7       	brne	.-28     	; 0x7c8 <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
     7e4:	8c 2f       	mov	r24, r28
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	0f 91       	pop	r16
     7ec:	ef 90       	pop	r14
     7ee:	bf 90       	pop	r11
     7f0:	af 90       	pop	r10
     7f2:	9f 90       	pop	r9
     7f4:	8f 90       	pop	r8
     7f6:	7f 90       	pop	r7
     7f8:	6f 90       	pop	r6
     7fa:	5f 90       	pop	r5
     7fc:	4f 90       	pop	r4
     7fe:	08 95       	ret

00000800 <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     800:	2f 92       	push	r2
     802:	3f 92       	push	r3
     804:	4f 92       	push	r4
     806:	5f 92       	push	r5
     808:	6f 92       	push	r6
     80a:	7f 92       	push	r7
     80c:	8f 92       	push	r8
     80e:	9f 92       	push	r9
     810:	af 92       	push	r10
     812:	bf 92       	push	r11
     814:	cf 92       	push	r12
     816:	ef 92       	push	r14
     818:	ff 92       	push	r15
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
     824:	1b 01       	movw	r2, r22
     826:	29 01       	movw	r4, r18
     828:	3a 01       	movw	r6, r20
     82a:	47 01       	movw	r8, r14
     82c:	58 01       	movw	r10, r16
     82e:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
     830:	0c 2d       	mov	r16, r12
     832:	a5 01       	movw	r20, r10
     834:	94 01       	movw	r18, r8
     836:	c3 01       	movw	r24, r6
     838:	b2 01       	movw	r22, r4
     83a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <calc_bscale>
     83e:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
     840:	08 2f       	mov	r16, r24
     842:	a5 01       	movw	r20, r10
     844:	94 01       	movw	r18, r8
     846:	c3 01       	movw	r24, r6
     848:	b2 01       	movw	r22, r4
     84a:	0e 94 23 03 	call	0x646	; 0x646 <calc_bsel>
     84e:	f8 2e       	mov	r15, r24
     850:	09 2f       	mov	r16, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
     852:	41 e0       	ldi	r20, 0x01	; 1
     854:	b1 01       	movw	r22, r2
     856:	ce 01       	movw	r24, r28
     858:	0e 94 61 04 	call	0x8c2	; 0x8c2 <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
     85c:	e8 81       	ld	r30, Y
     85e:	f9 81       	ldd	r31, Y+1	; 0x01
     860:	83 e0       	ldi	r24, 0x03	; 3
     862:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
     864:	e8 81       	ld	r30, Y
     866:	f9 81       	ldd	r31, Y+1	; 0x01
     868:	84 81       	ldd	r24, Z+4	; 0x04
     86a:	80 61       	ori	r24, 0x10	; 16
     86c:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
     86e:	e8 81       	ld	r30, Y
     870:	f9 81       	ldd	r31, Y+1	; 0x01
     872:	84 81       	ldd	r24, Z+4	; 0x04
     874:	88 60       	ori	r24, 0x08	; 8
     876:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
     878:	e8 81       	ld	r30, Y
     87a:	f9 81       	ldd	r31, Y+1	; 0x01
     87c:	83 81       	ldd	r24, Z+3	; 0x03
     87e:	8f 7c       	andi	r24, 0xCF	; 207
     880:	80 61       	ori	r24, 0x10	; 16
     882:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
     884:	e8 81       	ld	r30, Y
     886:	f9 81       	ldd	r31, Y+1	; 0x01
     888:	f6 82       	std	Z+6, r15	; 0x06
     88a:	e8 81       	ld	r30, Y
     88c:	f9 81       	ldd	r31, Y+1	; 0x01
     88e:	12 95       	swap	r17
     890:	10 7f       	andi	r17, 0xF0	; 240
     892:	10 2b       	or	r17, r16
     894:	17 83       	std	Z+7, r17	; 0x07

  set_usart_txrx_direction(uart->usart);
     896:	88 81       	ld	r24, Y
     898:	99 81       	ldd	r25, Y+1	; 0x01
     89a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <set_usart_txrx_direction>
}
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	cf 90       	pop	r12
     8ac:	bf 90       	pop	r11
     8ae:	af 90       	pop	r10
     8b0:	9f 90       	pop	r9
     8b2:	8f 90       	pop	r8
     8b4:	7f 90       	pop	r7
     8b6:	6f 90       	pop	r6
     8b8:	5f 90       	pop	r5
     8ba:	4f 90       	pop	r4
     8bc:	3f 90       	pop	r3
     8be:	2f 90       	pop	r2
     8c0:	08 95       	ret

000008c2 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
     8c2:	fc 01       	movw	r30, r24
     8c4:	60 83       	st	Z, r22
     8c6:	71 83       	std	Z+1, r23	; 0x01
     8c8:	42 83       	std	Z+2, r20	; 0x02
     8ca:	e8 5f       	subi	r30, 0xF8	; 248
     8cc:	fe 4f       	sbci	r31, 0xFE	; 254
     8ce:	10 82       	st	Z, r1
     8d0:	31 97       	sbiw	r30, 0x01	; 1
     8d2:	10 82       	st	Z, r1
     8d4:	33 96       	adiw	r30, 0x03	; 3
     8d6:	10 82       	st	Z, r1
     8d8:	31 97       	sbiw	r30, 0x01	; 1
     8da:	10 82       	st	Z, r1
     8dc:	08 95       	ret

000008de <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     8de:	fc 01       	movw	r30, r24
     8e0:	e7 5f       	subi	r30, 0xF7	; 247
     8e2:	fe 4f       	sbci	r31, 0xFE	; 254
     8e4:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     8e6:	31 96       	adiw	r30, 0x01	; 1
     8e8:	30 81       	ld	r19, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	92 0f       	add	r25, r18
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	93 13       	cpse	r25, r19
     8f2:	01 c0       	rjmp	.+2      	; 0x8f6 <USART_TXBuffer_FreeSpace+0x18>
     8f4:	80 e0       	ldi	r24, 0x00	; 0
}
     8f6:	08 95       	ret

000008f8 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	fc 01       	movw	r30, r24
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     8fe:	dc 01       	movw	r26, r24
     900:	a7 5f       	subi	r26, 0xF7	; 247
     902:	be 4f       	sbci	r27, 0xFE	; 254
     904:	9c 91       	ld	r25, X
     906:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     908:	11 96       	adiw	r26, 0x01	; 1
     90a:	2c 91       	ld	r18, X

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	92 13       	cpse	r25, r18
     910:	01 c0       	rjmp	.+2      	; 0x914 <USART_TXBuffer_PutByte+0x1c>
     912:	80 e0       	ldi	r24, 0x00	; 0

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);


	if(TXBuffer_FreeSpace)
     914:	92 17       	cp	r25, r18
     916:	a1 f0       	breq	.+40     	; 0x940 <USART_TXBuffer_PutByte+0x48>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
     918:	df 01       	movw	r26, r30
     91a:	a7 5f       	subi	r26, 0xF7	; 247
     91c:	be 4f       	sbci	r27, 0xFE	; 254
     91e:	9c 91       	ld	r25, X
	  	TXbufPtr->TX[tempTX_Head]= data;
     920:	ef 01       	movw	r28, r30
     922:	c9 0f       	add	r28, r25
     924:	d1 1d       	adc	r29, r1
     926:	6f 83       	std	Y+7, r22	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
     928:	9f 5f       	subi	r25, 0xFF	; 255
     92a:	9c 93       	st	X, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
     92c:	a0 81       	ld	r26, Z
     92e:	b1 81       	ldd	r27, Z+1	; 0x01
     930:	13 96       	adiw	r26, 0x03	; 3
     932:	9c 91       	ld	r25, X
     934:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
     936:	9c 7f       	andi	r25, 0xFC	; 252
     938:	22 81       	ldd	r18, Z+2	; 0x02
     93a:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
     93c:	13 96       	adiw	r26, 0x03	; 3
     93e:	9c 93       	st	X, r25
	}
	return TXBuffer_FreeSpace;
}
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	08 95       	ret

00000946 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     946:	fc 01       	movw	r30, r24
     948:	e9 5f       	subi	r30, 0xF9	; 249
     94a:	fe 4f       	sbci	r31, 0xFE	; 254
     94c:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     94e:	31 96       	adiw	r30, 0x01	; 1
     950:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	29 13       	cpse	r18, r25
     956:	01 c0       	rjmp	.+2      	; 0x95a <USART_RXBufferData_Available+0x14>
     958:	80 e0       	ldi	r24, 0x00	; 0
}
     95a:	08 95       	ret

0000095c <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     95c:	fc 01       	movw	r30, r24
     95e:	e8 5f       	subi	r30, 0xF8	; 248
     960:	fe 4f       	sbci	r31, 0xFE	; 254
     962:	20 81       	ld	r18, Z
     964:	dc 01       	movw	r26, r24
     966:	a2 0f       	add	r26, r18
     968:	b1 1d       	adc	r27, r1
     96a:	13 96       	adiw	r26, 0x03	; 3
     96c:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     96e:	90 81       	ld	r25, Z
     970:	9f 5f       	subi	r25, 0xFF	; 255
     972:	93 70       	andi	r25, 0x03	; 3
     974:	90 83       	st	Z, r25

	return ans;
}
     976:	08 95       	ret

00000978 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     978:	fc 01       	movw	r30, r24
     97a:	e9 5f       	subi	r30, 0xF9	; 249
     97c:	fe 4f       	sbci	r31, 0xFE	; 254
     97e:	20 81       	ld	r18, Z
     980:	2f 5f       	subi	r18, 0xFF	; 255
     982:	23 70       	andi	r18, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     984:	31 96       	adiw	r30, 0x01	; 1
     986:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
     988:	dc 01       	movw	r26, r24
     98a:	ed 91       	ld	r30, X+
     98c:	fc 91       	ld	r31, X
     98e:	11 97       	sbiw	r26, 0x01	; 1
     990:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
     992:	23 17       	cp	r18, r19
     994:	59 f0       	breq	.+22     	; 0x9ac <USART_RXComplete+0x34>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     996:	fc 01       	movw	r30, r24
     998:	e9 5f       	subi	r30, 0xF9	; 249
     99a:	fe 4f       	sbci	r31, 0xFE	; 254
     99c:	30 81       	ld	r19, Z
     99e:	a3 0f       	add	r26, r19
     9a0:	b1 1d       	adc	r27, r1
     9a2:	13 96       	adiw	r26, 0x03	; 3
     9a4:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
     9a6:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
     9ac:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
     9ae:	08 95       	ret

000009b0 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     9b4:	fc 01       	movw	r30, r24
     9b6:	e6 5f       	subi	r30, 0xF6	; 246
     9b8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ba:	30 81       	ld	r19, Z
	if (bufPtr->TX_Head == tempTX_Tail){
     9bc:	31 97       	sbiw	r30, 0x01	; 1
     9be:	20 81       	ld	r18, Z
     9c0:	32 13       	cpse	r19, r18
     9c2:	07 c0       	rjmp	.+14     	; 0x9d2 <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
     9c4:	dc 01       	movw	r26, r24
     9c6:	ed 91       	ld	r30, X+
     9c8:	fc 91       	ld	r31, X
     9ca:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     9cc:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
     9ce:	83 83       	std	Z+3, r24	; 0x03
     9d0:	10 c0       	rjmp	.+32     	; 0x9f2 <USART_DataRegEmpty+0x42>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     9d2:	fc 01       	movw	r30, r24
     9d4:	e6 5f       	subi	r30, 0xF6	; 246
     9d6:	fe 4f       	sbci	r31, 0xFE	; 254
     9d8:	20 81       	ld	r18, Z
     9da:	dc 01       	movw	r26, r24
     9dc:	a2 0f       	add	r26, r18
     9de:	b1 1d       	adc	r27, r1
     9e0:	17 96       	adiw	r26, 0x07	; 7
     9e2:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
     9e4:	ec 01       	movw	r28, r24
     9e6:	a8 81       	ld	r26, Y
     9e8:	b9 81       	ldd	r27, Y+1	; 0x01
     9ea:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
     9ec:	80 81       	ld	r24, Z
     9ee:	8f 5f       	subi	r24, 0xFF	; 255
     9f0:	80 83       	st	Z, r24
	}
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <__subsf3>:
     9f8:	50 58       	subi	r21, 0x80	; 128

000009fa <__addsf3>:
     9fa:	bb 27       	eor	r27, r27
     9fc:	aa 27       	eor	r26, r26
     9fe:	0e 94 14 05 	call	0xa28	; 0xa28 <__addsf3x>
     a02:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__fp_round>
     a06:	0e 94 50 06 	call	0xca0	; 0xca0 <__fp_pscA>
     a0a:	38 f0       	brcs	.+14     	; 0xa1a <__addsf3+0x20>
     a0c:	0e 94 57 06 	call	0xcae	; 0xcae <__fp_pscB>
     a10:	20 f0       	brcs	.+8      	; 0xa1a <__addsf3+0x20>
     a12:	39 f4       	brne	.+14     	; 0xa22 <__addsf3+0x28>
     a14:	9f 3f       	cpi	r25, 0xFF	; 255
     a16:	19 f4       	brne	.+6      	; 0xa1e <__addsf3+0x24>
     a18:	26 f4       	brtc	.+8      	; 0xa22 <__addsf3+0x28>
     a1a:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__fp_nan>
     a1e:	0e f4       	brtc	.+2      	; 0xa22 <__addsf3+0x28>
     a20:	e0 95       	com	r30
     a22:	e7 fb       	bst	r30, 7
     a24:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__fp_inf>

00000a28 <__addsf3x>:
     a28:	e9 2f       	mov	r30, r25
     a2a:	0e 94 6f 06 	call	0xcde	; 0xcde <__fp_split3>
     a2e:	58 f3       	brcs	.-42     	; 0xa06 <__addsf3+0xc>
     a30:	ba 17       	cp	r27, r26
     a32:	62 07       	cpc	r22, r18
     a34:	73 07       	cpc	r23, r19
     a36:	84 07       	cpc	r24, r20
     a38:	95 07       	cpc	r25, r21
     a3a:	20 f0       	brcs	.+8      	; 0xa44 <__addsf3x+0x1c>
     a3c:	79 f4       	brne	.+30     	; 0xa5c <__addsf3x+0x34>
     a3e:	a6 f5       	brtc	.+104    	; 0xaa8 <__addsf3x+0x80>
     a40:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_zero>
     a44:	0e f4       	brtc	.+2      	; 0xa48 <__addsf3x+0x20>
     a46:	e0 95       	com	r30
     a48:	0b 2e       	mov	r0, r27
     a4a:	ba 2f       	mov	r27, r26
     a4c:	a0 2d       	mov	r26, r0
     a4e:	0b 01       	movw	r0, r22
     a50:	b9 01       	movw	r22, r18
     a52:	90 01       	movw	r18, r0
     a54:	0c 01       	movw	r0, r24
     a56:	ca 01       	movw	r24, r20
     a58:	a0 01       	movw	r20, r0
     a5a:	11 24       	eor	r1, r1
     a5c:	ff 27       	eor	r31, r31
     a5e:	59 1b       	sub	r21, r25
     a60:	99 f0       	breq	.+38     	; 0xa88 <__addsf3x+0x60>
     a62:	59 3f       	cpi	r21, 0xF9	; 249
     a64:	50 f4       	brcc	.+20     	; 0xa7a <__addsf3x+0x52>
     a66:	50 3e       	cpi	r21, 0xE0	; 224
     a68:	68 f1       	brcs	.+90     	; 0xac4 <__addsf3x+0x9c>
     a6a:	1a 16       	cp	r1, r26
     a6c:	f0 40       	sbci	r31, 0x00	; 0
     a6e:	a2 2f       	mov	r26, r18
     a70:	23 2f       	mov	r18, r19
     a72:	34 2f       	mov	r19, r20
     a74:	44 27       	eor	r20, r20
     a76:	58 5f       	subi	r21, 0xF8	; 248
     a78:	f3 cf       	rjmp	.-26     	; 0xa60 <__addsf3x+0x38>
     a7a:	46 95       	lsr	r20
     a7c:	37 95       	ror	r19
     a7e:	27 95       	ror	r18
     a80:	a7 95       	ror	r26
     a82:	f0 40       	sbci	r31, 0x00	; 0
     a84:	53 95       	inc	r21
     a86:	c9 f7       	brne	.-14     	; 0xa7a <__addsf3x+0x52>
     a88:	7e f4       	brtc	.+30     	; 0xaa8 <__addsf3x+0x80>
     a8a:	1f 16       	cp	r1, r31
     a8c:	ba 0b       	sbc	r27, r26
     a8e:	62 0b       	sbc	r22, r18
     a90:	73 0b       	sbc	r23, r19
     a92:	84 0b       	sbc	r24, r20
     a94:	ba f0       	brmi	.+46     	; 0xac4 <__addsf3x+0x9c>
     a96:	91 50       	subi	r25, 0x01	; 1
     a98:	a1 f0       	breq	.+40     	; 0xac2 <__addsf3x+0x9a>
     a9a:	ff 0f       	add	r31, r31
     a9c:	bb 1f       	adc	r27, r27
     a9e:	66 1f       	adc	r22, r22
     aa0:	77 1f       	adc	r23, r23
     aa2:	88 1f       	adc	r24, r24
     aa4:	c2 f7       	brpl	.-16     	; 0xa96 <__addsf3x+0x6e>
     aa6:	0e c0       	rjmp	.+28     	; 0xac4 <__addsf3x+0x9c>
     aa8:	ba 0f       	add	r27, r26
     aaa:	62 1f       	adc	r22, r18
     aac:	73 1f       	adc	r23, r19
     aae:	84 1f       	adc	r24, r20
     ab0:	48 f4       	brcc	.+18     	; 0xac4 <__addsf3x+0x9c>
     ab2:	87 95       	ror	r24
     ab4:	77 95       	ror	r23
     ab6:	67 95       	ror	r22
     ab8:	b7 95       	ror	r27
     aba:	f7 95       	ror	r31
     abc:	9e 3f       	cpi	r25, 0xFE	; 254
     abe:	08 f0       	brcs	.+2      	; 0xac2 <__addsf3x+0x9a>
     ac0:	b0 cf       	rjmp	.-160    	; 0xa22 <__addsf3+0x28>
     ac2:	93 95       	inc	r25
     ac4:	88 0f       	add	r24, r24
     ac6:	08 f0       	brcs	.+2      	; 0xaca <__addsf3x+0xa2>
     ac8:	99 27       	eor	r25, r25
     aca:	ee 0f       	add	r30, r30
     acc:	97 95       	ror	r25
     ace:	87 95       	ror	r24
     ad0:	08 95       	ret

00000ad2 <__divsf3>:
     ad2:	0e 94 7d 05 	call	0xafa	; 0xafa <__divsf3x>
     ad6:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__fp_round>
     ada:	0e 94 57 06 	call	0xcae	; 0xcae <__fp_pscB>
     ade:	58 f0       	brcs	.+22     	; 0xaf6 <__divsf3+0x24>
     ae0:	0e 94 50 06 	call	0xca0	; 0xca0 <__fp_pscA>
     ae4:	40 f0       	brcs	.+16     	; 0xaf6 <__divsf3+0x24>
     ae6:	29 f4       	brne	.+10     	; 0xaf2 <__divsf3+0x20>
     ae8:	5f 3f       	cpi	r21, 0xFF	; 255
     aea:	29 f0       	breq	.+10     	; 0xaf6 <__divsf3+0x24>
     aec:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__fp_inf>
     af0:	51 11       	cpse	r21, r1
     af2:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_szero>
     af6:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__fp_nan>

00000afa <__divsf3x>:
     afa:	0e 94 6f 06 	call	0xcde	; 0xcde <__fp_split3>
     afe:	68 f3       	brcs	.-38     	; 0xada <__divsf3+0x8>

00000b00 <__divsf3_pse>:
     b00:	99 23       	and	r25, r25
     b02:	b1 f3       	breq	.-20     	; 0xaf0 <__divsf3+0x1e>
     b04:	55 23       	and	r21, r21
     b06:	91 f3       	breq	.-28     	; 0xaec <__divsf3+0x1a>
     b08:	95 1b       	sub	r25, r21
     b0a:	55 0b       	sbc	r21, r21
     b0c:	bb 27       	eor	r27, r27
     b0e:	aa 27       	eor	r26, r26
     b10:	62 17       	cp	r22, r18
     b12:	73 07       	cpc	r23, r19
     b14:	84 07       	cpc	r24, r20
     b16:	38 f0       	brcs	.+14     	; 0xb26 <__divsf3_pse+0x26>
     b18:	9f 5f       	subi	r25, 0xFF	; 255
     b1a:	5f 4f       	sbci	r21, 0xFF	; 255
     b1c:	22 0f       	add	r18, r18
     b1e:	33 1f       	adc	r19, r19
     b20:	44 1f       	adc	r20, r20
     b22:	aa 1f       	adc	r26, r26
     b24:	a9 f3       	breq	.-22     	; 0xb10 <__divsf3_pse+0x10>
     b26:	35 d0       	rcall	.+106    	; 0xb92 <__divsf3_pse+0x92>
     b28:	0e 2e       	mov	r0, r30
     b2a:	3a f0       	brmi	.+14     	; 0xb3a <__divsf3_pse+0x3a>
     b2c:	e0 e8       	ldi	r30, 0x80	; 128
     b2e:	32 d0       	rcall	.+100    	; 0xb94 <__divsf3_pse+0x94>
     b30:	91 50       	subi	r25, 0x01	; 1
     b32:	50 40       	sbci	r21, 0x00	; 0
     b34:	e6 95       	lsr	r30
     b36:	00 1c       	adc	r0, r0
     b38:	ca f7       	brpl	.-14     	; 0xb2c <__divsf3_pse+0x2c>
     b3a:	2b d0       	rcall	.+86     	; 0xb92 <__divsf3_pse+0x92>
     b3c:	fe 2f       	mov	r31, r30
     b3e:	29 d0       	rcall	.+82     	; 0xb92 <__divsf3_pse+0x92>
     b40:	66 0f       	add	r22, r22
     b42:	77 1f       	adc	r23, r23
     b44:	88 1f       	adc	r24, r24
     b46:	bb 1f       	adc	r27, r27
     b48:	26 17       	cp	r18, r22
     b4a:	37 07       	cpc	r19, r23
     b4c:	48 07       	cpc	r20, r24
     b4e:	ab 07       	cpc	r26, r27
     b50:	b0 e8       	ldi	r27, 0x80	; 128
     b52:	09 f0       	breq	.+2      	; 0xb56 <__divsf3_pse+0x56>
     b54:	bb 0b       	sbc	r27, r27
     b56:	80 2d       	mov	r24, r0
     b58:	bf 01       	movw	r22, r30
     b5a:	ff 27       	eor	r31, r31
     b5c:	93 58       	subi	r25, 0x83	; 131
     b5e:	5f 4f       	sbci	r21, 0xFF	; 255
     b60:	3a f0       	brmi	.+14     	; 0xb70 <__divsf3_pse+0x70>
     b62:	9e 3f       	cpi	r25, 0xFE	; 254
     b64:	51 05       	cpc	r21, r1
     b66:	78 f0       	brcs	.+30     	; 0xb86 <__divsf3_pse+0x86>
     b68:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__fp_inf>
     b6c:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_szero>
     b70:	5f 3f       	cpi	r21, 0xFF	; 255
     b72:	e4 f3       	brlt	.-8      	; 0xb6c <__divsf3_pse+0x6c>
     b74:	98 3e       	cpi	r25, 0xE8	; 232
     b76:	d4 f3       	brlt	.-12     	; 0xb6c <__divsf3_pse+0x6c>
     b78:	86 95       	lsr	r24
     b7a:	77 95       	ror	r23
     b7c:	67 95       	ror	r22
     b7e:	b7 95       	ror	r27
     b80:	f7 95       	ror	r31
     b82:	9f 5f       	subi	r25, 0xFF	; 255
     b84:	c9 f7       	brne	.-14     	; 0xb78 <__divsf3_pse+0x78>
     b86:	88 0f       	add	r24, r24
     b88:	91 1d       	adc	r25, r1
     b8a:	96 95       	lsr	r25
     b8c:	87 95       	ror	r24
     b8e:	97 f9       	bld	r25, 7
     b90:	08 95       	ret
     b92:	e1 e0       	ldi	r30, 0x01	; 1
     b94:	66 0f       	add	r22, r22
     b96:	77 1f       	adc	r23, r23
     b98:	88 1f       	adc	r24, r24
     b9a:	bb 1f       	adc	r27, r27
     b9c:	62 17       	cp	r22, r18
     b9e:	73 07       	cpc	r23, r19
     ba0:	84 07       	cpc	r24, r20
     ba2:	ba 07       	cpc	r27, r26
     ba4:	20 f0       	brcs	.+8      	; 0xbae <__divsf3_pse+0xae>
     ba6:	62 1b       	sub	r22, r18
     ba8:	73 0b       	sbc	r23, r19
     baa:	84 0b       	sbc	r24, r20
     bac:	ba 0b       	sbc	r27, r26
     bae:	ee 1f       	adc	r30, r30
     bb0:	88 f7       	brcc	.-30     	; 0xb94 <__divsf3_pse+0x94>
     bb2:	e0 95       	com	r30
     bb4:	08 95       	ret

00000bb6 <__fixunssfsi>:
     bb6:	0e 94 77 06 	call	0xcee	; 0xcee <__fp_splitA>
     bba:	88 f0       	brcs	.+34     	; 0xbde <__fixunssfsi+0x28>
     bbc:	9f 57       	subi	r25, 0x7F	; 127
     bbe:	98 f0       	brcs	.+38     	; 0xbe6 <__fixunssfsi+0x30>
     bc0:	b9 2f       	mov	r27, r25
     bc2:	99 27       	eor	r25, r25
     bc4:	b7 51       	subi	r27, 0x17	; 23
     bc6:	b0 f0       	brcs	.+44     	; 0xbf4 <__fixunssfsi+0x3e>
     bc8:	e1 f0       	breq	.+56     	; 0xc02 <__fixunssfsi+0x4c>
     bca:	66 0f       	add	r22, r22
     bcc:	77 1f       	adc	r23, r23
     bce:	88 1f       	adc	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	1a f0       	brmi	.+6      	; 0xbda <__fixunssfsi+0x24>
     bd4:	ba 95       	dec	r27
     bd6:	c9 f7       	brne	.-14     	; 0xbca <__fixunssfsi+0x14>
     bd8:	14 c0       	rjmp	.+40     	; 0xc02 <__fixunssfsi+0x4c>
     bda:	b1 30       	cpi	r27, 0x01	; 1
     bdc:	91 f0       	breq	.+36     	; 0xc02 <__fixunssfsi+0x4c>
     bde:	0e 94 91 06 	call	0xd22	; 0xd22 <__fp_zero>
     be2:	b1 e0       	ldi	r27, 0x01	; 1
     be4:	08 95       	ret
     be6:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_zero>
     bea:	67 2f       	mov	r22, r23
     bec:	78 2f       	mov	r23, r24
     bee:	88 27       	eor	r24, r24
     bf0:	b8 5f       	subi	r27, 0xF8	; 248
     bf2:	39 f0       	breq	.+14     	; 0xc02 <__fixunssfsi+0x4c>
     bf4:	b9 3f       	cpi	r27, 0xF9	; 249
     bf6:	cc f3       	brlt	.-14     	; 0xbea <__fixunssfsi+0x34>
     bf8:	86 95       	lsr	r24
     bfa:	77 95       	ror	r23
     bfc:	67 95       	ror	r22
     bfe:	b3 95       	inc	r27
     c00:	d9 f7       	brne	.-10     	; 0xbf8 <__fixunssfsi+0x42>
     c02:	3e f4       	brtc	.+14     	; 0xc12 <__fixunssfsi+0x5c>
     c04:	90 95       	com	r25
     c06:	80 95       	com	r24
     c08:	70 95       	com	r23
     c0a:	61 95       	neg	r22
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	8f 4f       	sbci	r24, 0xFF	; 255
     c10:	9f 4f       	sbci	r25, 0xFF	; 255
     c12:	08 95       	ret

00000c14 <__floatunsisf>:
     c14:	e8 94       	clt
     c16:	09 c0       	rjmp	.+18     	; 0xc2a <__floatsisf+0x12>

00000c18 <__floatsisf>:
     c18:	97 fb       	bst	r25, 7
     c1a:	3e f4       	brtc	.+14     	; 0xc2a <__floatsisf+0x12>
     c1c:	90 95       	com	r25
     c1e:	80 95       	com	r24
     c20:	70 95       	com	r23
     c22:	61 95       	neg	r22
     c24:	7f 4f       	sbci	r23, 0xFF	; 255
     c26:	8f 4f       	sbci	r24, 0xFF	; 255
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	99 23       	and	r25, r25
     c2c:	a9 f0       	breq	.+42     	; 0xc58 <__floatsisf+0x40>
     c2e:	f9 2f       	mov	r31, r25
     c30:	96 e9       	ldi	r25, 0x96	; 150
     c32:	bb 27       	eor	r27, r27
     c34:	93 95       	inc	r25
     c36:	f6 95       	lsr	r31
     c38:	87 95       	ror	r24
     c3a:	77 95       	ror	r23
     c3c:	67 95       	ror	r22
     c3e:	b7 95       	ror	r27
     c40:	f1 11       	cpse	r31, r1
     c42:	f8 cf       	rjmp	.-16     	; 0xc34 <__floatsisf+0x1c>
     c44:	fa f4       	brpl	.+62     	; 0xc84 <__floatsisf+0x6c>
     c46:	bb 0f       	add	r27, r27
     c48:	11 f4       	brne	.+4      	; 0xc4e <__floatsisf+0x36>
     c4a:	60 ff       	sbrs	r22, 0
     c4c:	1b c0       	rjmp	.+54     	; 0xc84 <__floatsisf+0x6c>
     c4e:	6f 5f       	subi	r22, 0xFF	; 255
     c50:	7f 4f       	sbci	r23, 0xFF	; 255
     c52:	8f 4f       	sbci	r24, 0xFF	; 255
     c54:	9f 4f       	sbci	r25, 0xFF	; 255
     c56:	16 c0       	rjmp	.+44     	; 0xc84 <__floatsisf+0x6c>
     c58:	88 23       	and	r24, r24
     c5a:	11 f0       	breq	.+4      	; 0xc60 <__floatsisf+0x48>
     c5c:	96 e9       	ldi	r25, 0x96	; 150
     c5e:	11 c0       	rjmp	.+34     	; 0xc82 <__floatsisf+0x6a>
     c60:	77 23       	and	r23, r23
     c62:	21 f0       	breq	.+8      	; 0xc6c <__floatsisf+0x54>
     c64:	9e e8       	ldi	r25, 0x8E	; 142
     c66:	87 2f       	mov	r24, r23
     c68:	76 2f       	mov	r23, r22
     c6a:	05 c0       	rjmp	.+10     	; 0xc76 <__floatsisf+0x5e>
     c6c:	66 23       	and	r22, r22
     c6e:	71 f0       	breq	.+28     	; 0xc8c <__floatsisf+0x74>
     c70:	96 e8       	ldi	r25, 0x86	; 134
     c72:	86 2f       	mov	r24, r22
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	2a f0       	brmi	.+10     	; 0xc84 <__floatsisf+0x6c>
     c7a:	9a 95       	dec	r25
     c7c:	66 0f       	add	r22, r22
     c7e:	77 1f       	adc	r23, r23
     c80:	88 1f       	adc	r24, r24
     c82:	da f7       	brpl	.-10     	; 0xc7a <__floatsisf+0x62>
     c84:	88 0f       	add	r24, r24
     c86:	96 95       	lsr	r25
     c88:	87 95       	ror	r24
     c8a:	97 f9       	bld	r25, 7
     c8c:	08 95       	ret

00000c8e <__fp_inf>:
     c8e:	97 f9       	bld	r25, 7
     c90:	9f 67       	ori	r25, 0x7F	; 127
     c92:	80 e8       	ldi	r24, 0x80	; 128
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	08 95       	ret

00000c9a <__fp_nan>:
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	80 ec       	ldi	r24, 0xC0	; 192
     c9e:	08 95       	ret

00000ca0 <__fp_pscA>:
     ca0:	00 24       	eor	r0, r0
     ca2:	0a 94       	dec	r0
     ca4:	16 16       	cp	r1, r22
     ca6:	17 06       	cpc	r1, r23
     ca8:	18 06       	cpc	r1, r24
     caa:	09 06       	cpc	r0, r25
     cac:	08 95       	ret

00000cae <__fp_pscB>:
     cae:	00 24       	eor	r0, r0
     cb0:	0a 94       	dec	r0
     cb2:	12 16       	cp	r1, r18
     cb4:	13 06       	cpc	r1, r19
     cb6:	14 06       	cpc	r1, r20
     cb8:	05 06       	cpc	r0, r21
     cba:	08 95       	ret

00000cbc <__fp_round>:
     cbc:	09 2e       	mov	r0, r25
     cbe:	03 94       	inc	r0
     cc0:	00 0c       	add	r0, r0
     cc2:	11 f4       	brne	.+4      	; 0xcc8 <__fp_round+0xc>
     cc4:	88 23       	and	r24, r24
     cc6:	52 f0       	brmi	.+20     	; 0xcdc <__fp_round+0x20>
     cc8:	bb 0f       	add	r27, r27
     cca:	40 f4       	brcc	.+16     	; 0xcdc <__fp_round+0x20>
     ccc:	bf 2b       	or	r27, r31
     cce:	11 f4       	brne	.+4      	; 0xcd4 <__fp_round+0x18>
     cd0:	60 ff       	sbrs	r22, 0
     cd2:	04 c0       	rjmp	.+8      	; 0xcdc <__fp_round+0x20>
     cd4:	6f 5f       	subi	r22, 0xFF	; 255
     cd6:	7f 4f       	sbci	r23, 0xFF	; 255
     cd8:	8f 4f       	sbci	r24, 0xFF	; 255
     cda:	9f 4f       	sbci	r25, 0xFF	; 255
     cdc:	08 95       	ret

00000cde <__fp_split3>:
     cde:	57 fd       	sbrc	r21, 7
     ce0:	90 58       	subi	r25, 0x80	; 128
     ce2:	44 0f       	add	r20, r20
     ce4:	55 1f       	adc	r21, r21
     ce6:	59 f0       	breq	.+22     	; 0xcfe <__fp_splitA+0x10>
     ce8:	5f 3f       	cpi	r21, 0xFF	; 255
     cea:	71 f0       	breq	.+28     	; 0xd08 <__fp_splitA+0x1a>
     cec:	47 95       	ror	r20

00000cee <__fp_splitA>:
     cee:	88 0f       	add	r24, r24
     cf0:	97 fb       	bst	r25, 7
     cf2:	99 1f       	adc	r25, r25
     cf4:	61 f0       	breq	.+24     	; 0xd0e <__fp_splitA+0x20>
     cf6:	9f 3f       	cpi	r25, 0xFF	; 255
     cf8:	79 f0       	breq	.+30     	; 0xd18 <__fp_splitA+0x2a>
     cfa:	87 95       	ror	r24
     cfc:	08 95       	ret
     cfe:	12 16       	cp	r1, r18
     d00:	13 06       	cpc	r1, r19
     d02:	14 06       	cpc	r1, r20
     d04:	55 1f       	adc	r21, r21
     d06:	f2 cf       	rjmp	.-28     	; 0xcec <__fp_split3+0xe>
     d08:	46 95       	lsr	r20
     d0a:	f1 df       	rcall	.-30     	; 0xcee <__fp_splitA>
     d0c:	08 c0       	rjmp	.+16     	; 0xd1e <__fp_splitA+0x30>
     d0e:	16 16       	cp	r1, r22
     d10:	17 06       	cpc	r1, r23
     d12:	18 06       	cpc	r1, r24
     d14:	99 1f       	adc	r25, r25
     d16:	f1 cf       	rjmp	.-30     	; 0xcfa <__fp_splitA+0xc>
     d18:	86 95       	lsr	r24
     d1a:	71 05       	cpc	r23, r1
     d1c:	61 05       	cpc	r22, r1
     d1e:	08 94       	sec
     d20:	08 95       	ret

00000d22 <__fp_zero>:
     d22:	e8 94       	clt

00000d24 <__fp_szero>:
     d24:	bb 27       	eor	r27, r27
     d26:	66 27       	eor	r22, r22
     d28:	77 27       	eor	r23, r23
     d2a:	cb 01       	movw	r24, r22
     d2c:	97 f9       	bld	r25, 7
     d2e:	08 95       	ret

00000d30 <__mulsf3>:
     d30:	0e 94 ab 06 	call	0xd56	; 0xd56 <__mulsf3x>
     d34:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__fp_round>
     d38:	0e 94 50 06 	call	0xca0	; 0xca0 <__fp_pscA>
     d3c:	38 f0       	brcs	.+14     	; 0xd4c <__mulsf3+0x1c>
     d3e:	0e 94 57 06 	call	0xcae	; 0xcae <__fp_pscB>
     d42:	20 f0       	brcs	.+8      	; 0xd4c <__mulsf3+0x1c>
     d44:	95 23       	and	r25, r21
     d46:	11 f0       	breq	.+4      	; 0xd4c <__mulsf3+0x1c>
     d48:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__fp_inf>
     d4c:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__fp_nan>
     d50:	11 24       	eor	r1, r1
     d52:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_szero>

00000d56 <__mulsf3x>:
     d56:	0e 94 6f 06 	call	0xcde	; 0xcde <__fp_split3>
     d5a:	70 f3       	brcs	.-36     	; 0xd38 <__mulsf3+0x8>

00000d5c <__mulsf3_pse>:
     d5c:	95 9f       	mul	r25, r21
     d5e:	c1 f3       	breq	.-16     	; 0xd50 <__mulsf3+0x20>
     d60:	95 0f       	add	r25, r21
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	55 1f       	adc	r21, r21
     d66:	62 9f       	mul	r22, r18
     d68:	f0 01       	movw	r30, r0
     d6a:	72 9f       	mul	r23, r18
     d6c:	bb 27       	eor	r27, r27
     d6e:	f0 0d       	add	r31, r0
     d70:	b1 1d       	adc	r27, r1
     d72:	63 9f       	mul	r22, r19
     d74:	aa 27       	eor	r26, r26
     d76:	f0 0d       	add	r31, r0
     d78:	b1 1d       	adc	r27, r1
     d7a:	aa 1f       	adc	r26, r26
     d7c:	64 9f       	mul	r22, r20
     d7e:	66 27       	eor	r22, r22
     d80:	b0 0d       	add	r27, r0
     d82:	a1 1d       	adc	r26, r1
     d84:	66 1f       	adc	r22, r22
     d86:	82 9f       	mul	r24, r18
     d88:	22 27       	eor	r18, r18
     d8a:	b0 0d       	add	r27, r0
     d8c:	a1 1d       	adc	r26, r1
     d8e:	62 1f       	adc	r22, r18
     d90:	73 9f       	mul	r23, r19
     d92:	b0 0d       	add	r27, r0
     d94:	a1 1d       	adc	r26, r1
     d96:	62 1f       	adc	r22, r18
     d98:	83 9f       	mul	r24, r19
     d9a:	a0 0d       	add	r26, r0
     d9c:	61 1d       	adc	r22, r1
     d9e:	22 1f       	adc	r18, r18
     da0:	74 9f       	mul	r23, r20
     da2:	33 27       	eor	r19, r19
     da4:	a0 0d       	add	r26, r0
     da6:	61 1d       	adc	r22, r1
     da8:	23 1f       	adc	r18, r19
     daa:	84 9f       	mul	r24, r20
     dac:	60 0d       	add	r22, r0
     dae:	21 1d       	adc	r18, r1
     db0:	82 2f       	mov	r24, r18
     db2:	76 2f       	mov	r23, r22
     db4:	6a 2f       	mov	r22, r26
     db6:	11 24       	eor	r1, r1
     db8:	9f 57       	subi	r25, 0x7F	; 127
     dba:	50 40       	sbci	r21, 0x00	; 0
     dbc:	9a f0       	brmi	.+38     	; 0xde4 <__mulsf3_pse+0x88>
     dbe:	f1 f0       	breq	.+60     	; 0xdfc <__mulsf3_pse+0xa0>
     dc0:	88 23       	and	r24, r24
     dc2:	4a f0       	brmi	.+18     	; 0xdd6 <__mulsf3_pse+0x7a>
     dc4:	ee 0f       	add	r30, r30
     dc6:	ff 1f       	adc	r31, r31
     dc8:	bb 1f       	adc	r27, r27
     dca:	66 1f       	adc	r22, r22
     dcc:	77 1f       	adc	r23, r23
     dce:	88 1f       	adc	r24, r24
     dd0:	91 50       	subi	r25, 0x01	; 1
     dd2:	50 40       	sbci	r21, 0x00	; 0
     dd4:	a9 f7       	brne	.-22     	; 0xdc0 <__mulsf3_pse+0x64>
     dd6:	9e 3f       	cpi	r25, 0xFE	; 254
     dd8:	51 05       	cpc	r21, r1
     dda:	80 f0       	brcs	.+32     	; 0xdfc <__mulsf3_pse+0xa0>
     ddc:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__fp_inf>
     de0:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_szero>
     de4:	5f 3f       	cpi	r21, 0xFF	; 255
     de6:	e4 f3       	brlt	.-8      	; 0xde0 <__mulsf3_pse+0x84>
     de8:	98 3e       	cpi	r25, 0xE8	; 232
     dea:	d4 f3       	brlt	.-12     	; 0xde0 <__mulsf3_pse+0x84>
     dec:	86 95       	lsr	r24
     dee:	77 95       	ror	r23
     df0:	67 95       	ror	r22
     df2:	b7 95       	ror	r27
     df4:	f7 95       	ror	r31
     df6:	e7 95       	ror	r30
     df8:	9f 5f       	subi	r25, 0xFF	; 255
     dfa:	c1 f7       	brne	.-16     	; 0xdec <__mulsf3_pse+0x90>
     dfc:	fe 2b       	or	r31, r30
     dfe:	88 0f       	add	r24, r24
     e00:	91 1d       	adc	r25, r1
     e02:	96 95       	lsr	r25
     e04:	87 95       	ror	r24
     e06:	97 f9       	bld	r25, 7
     e08:	08 95       	ret

00000e0a <round>:
     e0a:	0e 94 77 06 	call	0xcee	; 0xcee <__fp_splitA>
     e0e:	e8 f0       	brcs	.+58     	; 0xe4a <round+0x40>
     e10:	9e 37       	cpi	r25, 0x7E	; 126
     e12:	e8 f0       	brcs	.+58     	; 0xe4e <round+0x44>
     e14:	96 39       	cpi	r25, 0x96	; 150
     e16:	b8 f4       	brcc	.+46     	; 0xe46 <round+0x3c>
     e18:	9e 38       	cpi	r25, 0x8E	; 142
     e1a:	48 f4       	brcc	.+18     	; 0xe2e <round+0x24>
     e1c:	67 2f       	mov	r22, r23
     e1e:	78 2f       	mov	r23, r24
     e20:	88 27       	eor	r24, r24
     e22:	98 5f       	subi	r25, 0xF8	; 248
     e24:	f9 cf       	rjmp	.-14     	; 0xe18 <round+0xe>
     e26:	86 95       	lsr	r24
     e28:	77 95       	ror	r23
     e2a:	67 95       	ror	r22
     e2c:	93 95       	inc	r25
     e2e:	95 39       	cpi	r25, 0x95	; 149
     e30:	d0 f3       	brcs	.-12     	; 0xe26 <round+0x1c>
     e32:	b6 2f       	mov	r27, r22
     e34:	b1 70       	andi	r27, 0x01	; 1
     e36:	6b 0f       	add	r22, r27
     e38:	71 1d       	adc	r23, r1
     e3a:	81 1d       	adc	r24, r1
     e3c:	20 f4       	brcc	.+8      	; 0xe46 <round+0x3c>
     e3e:	87 95       	ror	r24
     e40:	77 95       	ror	r23
     e42:	67 95       	ror	r22
     e44:	93 95       	inc	r25
     e46:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__fp_mintl>
     e4a:	0c 94 44 07 	jmp	0xe88	; 0xe88 <__fp_mpack>
     e4e:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_szero>

00000e52 <__fp_mintl>:
     e52:	88 23       	and	r24, r24
     e54:	71 f4       	brne	.+28     	; 0xe72 <__fp_mintl+0x20>
     e56:	77 23       	and	r23, r23
     e58:	21 f0       	breq	.+8      	; 0xe62 <__fp_mintl+0x10>
     e5a:	98 50       	subi	r25, 0x08	; 8
     e5c:	87 2b       	or	r24, r23
     e5e:	76 2f       	mov	r23, r22
     e60:	07 c0       	rjmp	.+14     	; 0xe70 <__fp_mintl+0x1e>
     e62:	66 23       	and	r22, r22
     e64:	11 f4       	brne	.+4      	; 0xe6a <__fp_mintl+0x18>
     e66:	99 27       	eor	r25, r25
     e68:	0d c0       	rjmp	.+26     	; 0xe84 <__fp_mintl+0x32>
     e6a:	90 51       	subi	r25, 0x10	; 16
     e6c:	86 2b       	or	r24, r22
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	2a f0       	brmi	.+10     	; 0xe7e <__fp_mintl+0x2c>
     e74:	9a 95       	dec	r25
     e76:	66 0f       	add	r22, r22
     e78:	77 1f       	adc	r23, r23
     e7a:	88 1f       	adc	r24, r24
     e7c:	da f7       	brpl	.-10     	; 0xe74 <__fp_mintl+0x22>
     e7e:	88 0f       	add	r24, r24
     e80:	96 95       	lsr	r25
     e82:	87 95       	ror	r24
     e84:	97 f9       	bld	r25, 7
     e86:	08 95       	ret

00000e88 <__fp_mpack>:
     e88:	9f 3f       	cpi	r25, 0xFF	; 255
     e8a:	31 f0       	breq	.+12     	; 0xe98 <__fp_mpack_finite+0xc>

00000e8c <__fp_mpack_finite>:
     e8c:	91 50       	subi	r25, 0x01	; 1
     e8e:	20 f4       	brcc	.+8      	; 0xe98 <__fp_mpack_finite+0xc>
     e90:	87 95       	ror	r24
     e92:	77 95       	ror	r23
     e94:	67 95       	ror	r22
     e96:	b7 95       	ror	r27
     e98:	88 0f       	add	r24, r24
     e9a:	91 1d       	adc	r25, r1
     e9c:	96 95       	lsr	r25
     e9e:	87 95       	ror	r24
     ea0:	97 f9       	bld	r25, 7
     ea2:	08 95       	ret

00000ea4 <printf>:
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	ae 01       	movw	r20, r28
     eae:	4a 5f       	subi	r20, 0xFA	; 250
     eb0:	5f 4f       	sbci	r21, 0xFF	; 255
     eb2:	fa 01       	movw	r30, r20
     eb4:	61 91       	ld	r22, Z+
     eb6:	71 91       	ld	r23, Z+
     eb8:	af 01       	movw	r20, r30
     eba:	80 91 2d 21 	lds	r24, 0x212D	; 0x80212d <__iob+0x2>
     ebe:	90 91 2e 21 	lds	r25, 0x212E	; 0x80212e <__iob+0x3>
     ec2:	0e 94 96 07 	call	0xf2c	; 0xf2c <vfprintf>
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	08 95       	ret

00000ecc <puts>:
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	e0 91 2d 21 	lds	r30, 0x212D	; 0x80212d <__iob+0x2>
     ed8:	f0 91 2e 21 	lds	r31, 0x212E	; 0x80212e <__iob+0x3>
     edc:	23 81       	ldd	r18, Z+3	; 0x03
     ede:	21 ff       	sbrs	r18, 1
     ee0:	1b c0       	rjmp	.+54     	; 0xf18 <puts+0x4c>
     ee2:	8c 01       	movw	r16, r24
     ee4:	d0 e0       	ldi	r29, 0x00	; 0
     ee6:	c0 e0       	ldi	r28, 0x00	; 0
     ee8:	f8 01       	movw	r30, r16
     eea:	81 91       	ld	r24, Z+
     eec:	8f 01       	movw	r16, r30
     eee:	60 91 2d 21 	lds	r22, 0x212D	; 0x80212d <__iob+0x2>
     ef2:	70 91 2e 21 	lds	r23, 0x212E	; 0x80212e <__iob+0x3>
     ef6:	db 01       	movw	r26, r22
     ef8:	18 96       	adiw	r26, 0x08	; 8
     efa:	ed 91       	ld	r30, X+
     efc:	fc 91       	ld	r31, X
     efe:	19 97       	sbiw	r26, 0x09	; 9
     f00:	88 23       	and	r24, r24
     f02:	31 f0       	breq	.+12     	; 0xf10 <puts+0x44>
     f04:	19 95       	eicall
     f06:	89 2b       	or	r24, r25
     f08:	79 f3       	breq	.-34     	; 0xee8 <puts+0x1c>
     f0a:	df ef       	ldi	r29, 0xFF	; 255
     f0c:	cf ef       	ldi	r28, 0xFF	; 255
     f0e:	ec cf       	rjmp	.-40     	; 0xee8 <puts+0x1c>
     f10:	8a e0       	ldi	r24, 0x0A	; 10
     f12:	19 95       	eicall
     f14:	89 2b       	or	r24, r25
     f16:	19 f0       	breq	.+6      	; 0xf1e <puts+0x52>
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	9f ef       	ldi	r25, 0xFF	; 255
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <puts+0x56>
     f1e:	8d 2f       	mov	r24, r29
     f20:	9c 2f       	mov	r25, r28
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	08 95       	ret

00000f2c <vfprintf>:
     f2c:	2f 92       	push	r2
     f2e:	3f 92       	push	r3
     f30:	4f 92       	push	r4
     f32:	5f 92       	push	r5
     f34:	6f 92       	push	r6
     f36:	7f 92       	push	r7
     f38:	8f 92       	push	r8
     f3a:	9f 92       	push	r9
     f3c:	af 92       	push	r10
     f3e:	bf 92       	push	r11
     f40:	cf 92       	push	r12
     f42:	df 92       	push	r13
     f44:	ef 92       	push	r14
     f46:	ff 92       	push	r15
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	2b 97       	sbiw	r28, 0x0b	; 11
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	6c 01       	movw	r12, r24
     f5c:	7b 01       	movw	r14, r22
     f5e:	8a 01       	movw	r16, r20
     f60:	fc 01       	movw	r30, r24
     f62:	16 82       	std	Z+6, r1	; 0x06
     f64:	17 82       	std	Z+7, r1	; 0x07
     f66:	83 81       	ldd	r24, Z+3	; 0x03
     f68:	81 ff       	sbrs	r24, 1
     f6a:	cc c1       	rjmp	.+920    	; 0x1304 <vfprintf+0x3d8>
     f6c:	ce 01       	movw	r24, r28
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	3c 01       	movw	r6, r24
     f72:	f6 01       	movw	r30, r12
     f74:	93 81       	ldd	r25, Z+3	; 0x03
     f76:	f7 01       	movw	r30, r14
     f78:	93 fd       	sbrc	r25, 3
     f7a:	85 91       	lpm	r24, Z+
     f7c:	93 ff       	sbrs	r25, 3
     f7e:	81 91       	ld	r24, Z+
     f80:	7f 01       	movw	r14, r30
     f82:	88 23       	and	r24, r24
     f84:	09 f4       	brne	.+2      	; 0xf88 <vfprintf+0x5c>
     f86:	ba c1       	rjmp	.+884    	; 0x12fc <vfprintf+0x3d0>
     f88:	85 32       	cpi	r24, 0x25	; 37
     f8a:	39 f4       	brne	.+14     	; 0xf9a <vfprintf+0x6e>
     f8c:	93 fd       	sbrc	r25, 3
     f8e:	85 91       	lpm	r24, Z+
     f90:	93 ff       	sbrs	r25, 3
     f92:	81 91       	ld	r24, Z+
     f94:	7f 01       	movw	r14, r30
     f96:	85 32       	cpi	r24, 0x25	; 37
     f98:	29 f4       	brne	.+10     	; 0xfa4 <vfprintf+0x78>
     f9a:	b6 01       	movw	r22, r12
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
     fa2:	e7 cf       	rjmp	.-50     	; 0xf72 <vfprintf+0x46>
     fa4:	91 2c       	mov	r9, r1
     fa6:	21 2c       	mov	r2, r1
     fa8:	31 2c       	mov	r3, r1
     faa:	ff e1       	ldi	r31, 0x1F	; 31
     fac:	f3 15       	cp	r31, r3
     fae:	d8 f0       	brcs	.+54     	; 0xfe6 <vfprintf+0xba>
     fb0:	8b 32       	cpi	r24, 0x2B	; 43
     fb2:	79 f0       	breq	.+30     	; 0xfd2 <vfprintf+0xa6>
     fb4:	38 f4       	brcc	.+14     	; 0xfc4 <vfprintf+0x98>
     fb6:	80 32       	cpi	r24, 0x20	; 32
     fb8:	79 f0       	breq	.+30     	; 0xfd8 <vfprintf+0xac>
     fba:	83 32       	cpi	r24, 0x23	; 35
     fbc:	a1 f4       	brne	.+40     	; 0xfe6 <vfprintf+0xba>
     fbe:	23 2d       	mov	r18, r3
     fc0:	20 61       	ori	r18, 0x10	; 16
     fc2:	1d c0       	rjmp	.+58     	; 0xffe <vfprintf+0xd2>
     fc4:	8d 32       	cpi	r24, 0x2D	; 45
     fc6:	61 f0       	breq	.+24     	; 0xfe0 <vfprintf+0xb4>
     fc8:	80 33       	cpi	r24, 0x30	; 48
     fca:	69 f4       	brne	.+26     	; 0xfe6 <vfprintf+0xba>
     fcc:	23 2d       	mov	r18, r3
     fce:	21 60       	ori	r18, 0x01	; 1
     fd0:	16 c0       	rjmp	.+44     	; 0xffe <vfprintf+0xd2>
     fd2:	83 2d       	mov	r24, r3
     fd4:	82 60       	ori	r24, 0x02	; 2
     fd6:	38 2e       	mov	r3, r24
     fd8:	e3 2d       	mov	r30, r3
     fda:	e4 60       	ori	r30, 0x04	; 4
     fdc:	3e 2e       	mov	r3, r30
     fde:	2a c0       	rjmp	.+84     	; 0x1034 <vfprintf+0x108>
     fe0:	f3 2d       	mov	r31, r3
     fe2:	f8 60       	ori	r31, 0x08	; 8
     fe4:	1d c0       	rjmp	.+58     	; 0x1020 <vfprintf+0xf4>
     fe6:	37 fc       	sbrc	r3, 7
     fe8:	2d c0       	rjmp	.+90     	; 0x1044 <vfprintf+0x118>
     fea:	20 ed       	ldi	r18, 0xD0	; 208
     fec:	28 0f       	add	r18, r24
     fee:	2a 30       	cpi	r18, 0x0A	; 10
     ff0:	40 f0       	brcs	.+16     	; 0x1002 <vfprintf+0xd6>
     ff2:	8e 32       	cpi	r24, 0x2E	; 46
     ff4:	b9 f4       	brne	.+46     	; 0x1024 <vfprintf+0xf8>
     ff6:	36 fc       	sbrc	r3, 6
     ff8:	81 c1       	rjmp	.+770    	; 0x12fc <vfprintf+0x3d0>
     ffa:	23 2d       	mov	r18, r3
     ffc:	20 64       	ori	r18, 0x40	; 64
     ffe:	32 2e       	mov	r3, r18
    1000:	19 c0       	rjmp	.+50     	; 0x1034 <vfprintf+0x108>
    1002:	36 fe       	sbrs	r3, 6
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <vfprintf+0xe6>
    1006:	8a e0       	ldi	r24, 0x0A	; 10
    1008:	98 9e       	mul	r9, r24
    100a:	20 0d       	add	r18, r0
    100c:	11 24       	eor	r1, r1
    100e:	92 2e       	mov	r9, r18
    1010:	11 c0       	rjmp	.+34     	; 0x1034 <vfprintf+0x108>
    1012:	ea e0       	ldi	r30, 0x0A	; 10
    1014:	2e 9e       	mul	r2, r30
    1016:	20 0d       	add	r18, r0
    1018:	11 24       	eor	r1, r1
    101a:	22 2e       	mov	r2, r18
    101c:	f3 2d       	mov	r31, r3
    101e:	f0 62       	ori	r31, 0x20	; 32
    1020:	3f 2e       	mov	r3, r31
    1022:	08 c0       	rjmp	.+16     	; 0x1034 <vfprintf+0x108>
    1024:	8c 36       	cpi	r24, 0x6C	; 108
    1026:	21 f4       	brne	.+8      	; 0x1030 <vfprintf+0x104>
    1028:	83 2d       	mov	r24, r3
    102a:	80 68       	ori	r24, 0x80	; 128
    102c:	38 2e       	mov	r3, r24
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <vfprintf+0x108>
    1030:	88 36       	cpi	r24, 0x68	; 104
    1032:	41 f4       	brne	.+16     	; 0x1044 <vfprintf+0x118>
    1034:	f7 01       	movw	r30, r14
    1036:	93 fd       	sbrc	r25, 3
    1038:	85 91       	lpm	r24, Z+
    103a:	93 ff       	sbrs	r25, 3
    103c:	81 91       	ld	r24, Z+
    103e:	7f 01       	movw	r14, r30
    1040:	81 11       	cpse	r24, r1
    1042:	b3 cf       	rjmp	.-154    	; 0xfaa <vfprintf+0x7e>
    1044:	98 2f       	mov	r25, r24
    1046:	9f 7d       	andi	r25, 0xDF	; 223
    1048:	95 54       	subi	r25, 0x45	; 69
    104a:	93 30       	cpi	r25, 0x03	; 3
    104c:	28 f4       	brcc	.+10     	; 0x1058 <vfprintf+0x12c>
    104e:	0c 5f       	subi	r16, 0xFC	; 252
    1050:	1f 4f       	sbci	r17, 0xFF	; 255
    1052:	9f e3       	ldi	r25, 0x3F	; 63
    1054:	99 83       	std	Y+1, r25	; 0x01
    1056:	0d c0       	rjmp	.+26     	; 0x1072 <vfprintf+0x146>
    1058:	83 36       	cpi	r24, 0x63	; 99
    105a:	31 f0       	breq	.+12     	; 0x1068 <vfprintf+0x13c>
    105c:	83 37       	cpi	r24, 0x73	; 115
    105e:	71 f0       	breq	.+28     	; 0x107c <vfprintf+0x150>
    1060:	83 35       	cpi	r24, 0x53	; 83
    1062:	09 f0       	breq	.+2      	; 0x1066 <vfprintf+0x13a>
    1064:	59 c0       	rjmp	.+178    	; 0x1118 <vfprintf+0x1ec>
    1066:	21 c0       	rjmp	.+66     	; 0x10aa <vfprintf+0x17e>
    1068:	f8 01       	movw	r30, r16
    106a:	80 81       	ld	r24, Z
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	0e 5f       	subi	r16, 0xFE	; 254
    1070:	1f 4f       	sbci	r17, 0xFF	; 255
    1072:	88 24       	eor	r8, r8
    1074:	83 94       	inc	r8
    1076:	91 2c       	mov	r9, r1
    1078:	53 01       	movw	r10, r6
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <vfprintf+0x176>
    107c:	28 01       	movw	r4, r16
    107e:	f2 e0       	ldi	r31, 0x02	; 2
    1080:	4f 0e       	add	r4, r31
    1082:	51 1c       	adc	r5, r1
    1084:	f8 01       	movw	r30, r16
    1086:	a0 80       	ld	r10, Z
    1088:	b1 80       	ldd	r11, Z+1	; 0x01
    108a:	36 fe       	sbrs	r3, 6
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <vfprintf+0x168>
    108e:	69 2d       	mov	r22, r9
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <vfprintf+0x16c>
    1094:	6f ef       	ldi	r22, 0xFF	; 255
    1096:	7f ef       	ldi	r23, 0xFF	; 255
    1098:	c5 01       	movw	r24, r10
    109a:	0e 94 a5 09 	call	0x134a	; 0x134a <strnlen>
    109e:	4c 01       	movw	r8, r24
    10a0:	82 01       	movw	r16, r4
    10a2:	f3 2d       	mov	r31, r3
    10a4:	ff 77       	andi	r31, 0x7F	; 127
    10a6:	3f 2e       	mov	r3, r31
    10a8:	16 c0       	rjmp	.+44     	; 0x10d6 <vfprintf+0x1aa>
    10aa:	28 01       	movw	r4, r16
    10ac:	22 e0       	ldi	r18, 0x02	; 2
    10ae:	42 0e       	add	r4, r18
    10b0:	51 1c       	adc	r5, r1
    10b2:	f8 01       	movw	r30, r16
    10b4:	a0 80       	ld	r10, Z
    10b6:	b1 80       	ldd	r11, Z+1	; 0x01
    10b8:	36 fe       	sbrs	r3, 6
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <vfprintf+0x196>
    10bc:	69 2d       	mov	r22, r9
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <vfprintf+0x19a>
    10c2:	6f ef       	ldi	r22, 0xFF	; 255
    10c4:	7f ef       	ldi	r23, 0xFF	; 255
    10c6:	c5 01       	movw	r24, r10
    10c8:	0e 94 9a 09 	call	0x1334	; 0x1334 <strnlen_P>
    10cc:	4c 01       	movw	r8, r24
    10ce:	f3 2d       	mov	r31, r3
    10d0:	f0 68       	ori	r31, 0x80	; 128
    10d2:	3f 2e       	mov	r3, r31
    10d4:	82 01       	movw	r16, r4
    10d6:	33 fc       	sbrc	r3, 3
    10d8:	1b c0       	rjmp	.+54     	; 0x1110 <vfprintf+0x1e4>
    10da:	82 2d       	mov	r24, r2
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	88 16       	cp	r8, r24
    10e0:	99 06       	cpc	r9, r25
    10e2:	b0 f4       	brcc	.+44     	; 0x1110 <vfprintf+0x1e4>
    10e4:	b6 01       	movw	r22, r12
    10e6:	80 e2       	ldi	r24, 0x20	; 32
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    10ee:	2a 94       	dec	r2
    10f0:	f4 cf       	rjmp	.-24     	; 0x10da <vfprintf+0x1ae>
    10f2:	f5 01       	movw	r30, r10
    10f4:	37 fc       	sbrc	r3, 7
    10f6:	85 91       	lpm	r24, Z+
    10f8:	37 fe       	sbrs	r3, 7
    10fa:	81 91       	ld	r24, Z+
    10fc:	5f 01       	movw	r10, r30
    10fe:	b6 01       	movw	r22, r12
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    1106:	21 10       	cpse	r2, r1
    1108:	2a 94       	dec	r2
    110a:	21 e0       	ldi	r18, 0x01	; 1
    110c:	82 1a       	sub	r8, r18
    110e:	91 08       	sbc	r9, r1
    1110:	81 14       	cp	r8, r1
    1112:	91 04       	cpc	r9, r1
    1114:	71 f7       	brne	.-36     	; 0x10f2 <vfprintf+0x1c6>
    1116:	e8 c0       	rjmp	.+464    	; 0x12e8 <vfprintf+0x3bc>
    1118:	84 36       	cpi	r24, 0x64	; 100
    111a:	11 f0       	breq	.+4      	; 0x1120 <vfprintf+0x1f4>
    111c:	89 36       	cpi	r24, 0x69	; 105
    111e:	41 f5       	brne	.+80     	; 0x1170 <vfprintf+0x244>
    1120:	f8 01       	movw	r30, r16
    1122:	37 fe       	sbrs	r3, 7
    1124:	07 c0       	rjmp	.+14     	; 0x1134 <vfprintf+0x208>
    1126:	60 81       	ld	r22, Z
    1128:	71 81       	ldd	r23, Z+1	; 0x01
    112a:	82 81       	ldd	r24, Z+2	; 0x02
    112c:	93 81       	ldd	r25, Z+3	; 0x03
    112e:	0c 5f       	subi	r16, 0xFC	; 252
    1130:	1f 4f       	sbci	r17, 0xFF	; 255
    1132:	08 c0       	rjmp	.+16     	; 0x1144 <vfprintf+0x218>
    1134:	60 81       	ld	r22, Z
    1136:	71 81       	ldd	r23, Z+1	; 0x01
    1138:	07 2e       	mov	r0, r23
    113a:	00 0c       	add	r0, r0
    113c:	88 0b       	sbc	r24, r24
    113e:	99 0b       	sbc	r25, r25
    1140:	0e 5f       	subi	r16, 0xFE	; 254
    1142:	1f 4f       	sbci	r17, 0xFF	; 255
    1144:	f3 2d       	mov	r31, r3
    1146:	ff 76       	andi	r31, 0x6F	; 111
    1148:	3f 2e       	mov	r3, r31
    114a:	97 ff       	sbrs	r25, 7
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <vfprintf+0x234>
    114e:	90 95       	com	r25
    1150:	80 95       	com	r24
    1152:	70 95       	com	r23
    1154:	61 95       	neg	r22
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	8f 4f       	sbci	r24, 0xFF	; 255
    115a:	9f 4f       	sbci	r25, 0xFF	; 255
    115c:	f0 68       	ori	r31, 0x80	; 128
    115e:	3f 2e       	mov	r3, r31
    1160:	2a e0       	ldi	r18, 0x0A	; 10
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	a3 01       	movw	r20, r6
    1166:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__ultoa_invert>
    116a:	88 2e       	mov	r8, r24
    116c:	86 18       	sub	r8, r6
    116e:	45 c0       	rjmp	.+138    	; 0x11fa <vfprintf+0x2ce>
    1170:	85 37       	cpi	r24, 0x75	; 117
    1172:	31 f4       	brne	.+12     	; 0x1180 <vfprintf+0x254>
    1174:	23 2d       	mov	r18, r3
    1176:	2f 7e       	andi	r18, 0xEF	; 239
    1178:	b2 2e       	mov	r11, r18
    117a:	2a e0       	ldi	r18, 0x0A	; 10
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	25 c0       	rjmp	.+74     	; 0x11ca <vfprintf+0x29e>
    1180:	93 2d       	mov	r25, r3
    1182:	99 7f       	andi	r25, 0xF9	; 249
    1184:	b9 2e       	mov	r11, r25
    1186:	8f 36       	cpi	r24, 0x6F	; 111
    1188:	c1 f0       	breq	.+48     	; 0x11ba <vfprintf+0x28e>
    118a:	18 f4       	brcc	.+6      	; 0x1192 <vfprintf+0x266>
    118c:	88 35       	cpi	r24, 0x58	; 88
    118e:	79 f0       	breq	.+30     	; 0x11ae <vfprintf+0x282>
    1190:	b5 c0       	rjmp	.+362    	; 0x12fc <vfprintf+0x3d0>
    1192:	80 37       	cpi	r24, 0x70	; 112
    1194:	19 f0       	breq	.+6      	; 0x119c <vfprintf+0x270>
    1196:	88 37       	cpi	r24, 0x78	; 120
    1198:	21 f0       	breq	.+8      	; 0x11a2 <vfprintf+0x276>
    119a:	b0 c0       	rjmp	.+352    	; 0x12fc <vfprintf+0x3d0>
    119c:	e9 2f       	mov	r30, r25
    119e:	e0 61       	ori	r30, 0x10	; 16
    11a0:	be 2e       	mov	r11, r30
    11a2:	b4 fe       	sbrs	r11, 4
    11a4:	0d c0       	rjmp	.+26     	; 0x11c0 <vfprintf+0x294>
    11a6:	fb 2d       	mov	r31, r11
    11a8:	f4 60       	ori	r31, 0x04	; 4
    11aa:	bf 2e       	mov	r11, r31
    11ac:	09 c0       	rjmp	.+18     	; 0x11c0 <vfprintf+0x294>
    11ae:	34 fe       	sbrs	r3, 4
    11b0:	0a c0       	rjmp	.+20     	; 0x11c6 <vfprintf+0x29a>
    11b2:	29 2f       	mov	r18, r25
    11b4:	26 60       	ori	r18, 0x06	; 6
    11b6:	b2 2e       	mov	r11, r18
    11b8:	06 c0       	rjmp	.+12     	; 0x11c6 <vfprintf+0x29a>
    11ba:	28 e0       	ldi	r18, 0x08	; 8
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <vfprintf+0x29e>
    11c0:	20 e1       	ldi	r18, 0x10	; 16
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <vfprintf+0x29e>
    11c6:	20 e1       	ldi	r18, 0x10	; 16
    11c8:	32 e0       	ldi	r19, 0x02	; 2
    11ca:	f8 01       	movw	r30, r16
    11cc:	b7 fe       	sbrs	r11, 7
    11ce:	07 c0       	rjmp	.+14     	; 0x11de <vfprintf+0x2b2>
    11d0:	60 81       	ld	r22, Z
    11d2:	71 81       	ldd	r23, Z+1	; 0x01
    11d4:	82 81       	ldd	r24, Z+2	; 0x02
    11d6:	93 81       	ldd	r25, Z+3	; 0x03
    11d8:	0c 5f       	subi	r16, 0xFC	; 252
    11da:	1f 4f       	sbci	r17, 0xFF	; 255
    11dc:	06 c0       	rjmp	.+12     	; 0x11ea <vfprintf+0x2be>
    11de:	60 81       	ld	r22, Z
    11e0:	71 81       	ldd	r23, Z+1	; 0x01
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 5f       	subi	r16, 0xFE	; 254
    11e8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ea:	a3 01       	movw	r20, r6
    11ec:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__ultoa_invert>
    11f0:	88 2e       	mov	r8, r24
    11f2:	86 18       	sub	r8, r6
    11f4:	fb 2d       	mov	r31, r11
    11f6:	ff 77       	andi	r31, 0x7F	; 127
    11f8:	3f 2e       	mov	r3, r31
    11fa:	36 fe       	sbrs	r3, 6
    11fc:	0d c0       	rjmp	.+26     	; 0x1218 <vfprintf+0x2ec>
    11fe:	23 2d       	mov	r18, r3
    1200:	2e 7f       	andi	r18, 0xFE	; 254
    1202:	a2 2e       	mov	r10, r18
    1204:	89 14       	cp	r8, r9
    1206:	58 f4       	brcc	.+22     	; 0x121e <vfprintf+0x2f2>
    1208:	34 fe       	sbrs	r3, 4
    120a:	0b c0       	rjmp	.+22     	; 0x1222 <vfprintf+0x2f6>
    120c:	32 fc       	sbrc	r3, 2
    120e:	09 c0       	rjmp	.+18     	; 0x1222 <vfprintf+0x2f6>
    1210:	83 2d       	mov	r24, r3
    1212:	8e 7e       	andi	r24, 0xEE	; 238
    1214:	a8 2e       	mov	r10, r24
    1216:	05 c0       	rjmp	.+10     	; 0x1222 <vfprintf+0x2f6>
    1218:	b8 2c       	mov	r11, r8
    121a:	a3 2c       	mov	r10, r3
    121c:	03 c0       	rjmp	.+6      	; 0x1224 <vfprintf+0x2f8>
    121e:	b8 2c       	mov	r11, r8
    1220:	01 c0       	rjmp	.+2      	; 0x1224 <vfprintf+0x2f8>
    1222:	b9 2c       	mov	r11, r9
    1224:	a4 fe       	sbrs	r10, 4
    1226:	0f c0       	rjmp	.+30     	; 0x1246 <vfprintf+0x31a>
    1228:	fe 01       	movw	r30, r28
    122a:	e8 0d       	add	r30, r8
    122c:	f1 1d       	adc	r31, r1
    122e:	80 81       	ld	r24, Z
    1230:	80 33       	cpi	r24, 0x30	; 48
    1232:	21 f4       	brne	.+8      	; 0x123c <vfprintf+0x310>
    1234:	9a 2d       	mov	r25, r10
    1236:	99 7e       	andi	r25, 0xE9	; 233
    1238:	a9 2e       	mov	r10, r25
    123a:	09 c0       	rjmp	.+18     	; 0x124e <vfprintf+0x322>
    123c:	a2 fe       	sbrs	r10, 2
    123e:	06 c0       	rjmp	.+12     	; 0x124c <vfprintf+0x320>
    1240:	b3 94       	inc	r11
    1242:	b3 94       	inc	r11
    1244:	04 c0       	rjmp	.+8      	; 0x124e <vfprintf+0x322>
    1246:	8a 2d       	mov	r24, r10
    1248:	86 78       	andi	r24, 0x86	; 134
    124a:	09 f0       	breq	.+2      	; 0x124e <vfprintf+0x322>
    124c:	b3 94       	inc	r11
    124e:	a3 fc       	sbrc	r10, 3
    1250:	11 c0       	rjmp	.+34     	; 0x1274 <vfprintf+0x348>
    1252:	a0 fe       	sbrs	r10, 0
    1254:	06 c0       	rjmp	.+12     	; 0x1262 <vfprintf+0x336>
    1256:	b2 14       	cp	r11, r2
    1258:	88 f4       	brcc	.+34     	; 0x127c <vfprintf+0x350>
    125a:	28 0c       	add	r2, r8
    125c:	92 2c       	mov	r9, r2
    125e:	9b 18       	sub	r9, r11
    1260:	0e c0       	rjmp	.+28     	; 0x127e <vfprintf+0x352>
    1262:	b2 14       	cp	r11, r2
    1264:	60 f4       	brcc	.+24     	; 0x127e <vfprintf+0x352>
    1266:	b6 01       	movw	r22, r12
    1268:	80 e2       	ldi	r24, 0x20	; 32
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    1270:	b3 94       	inc	r11
    1272:	f7 cf       	rjmp	.-18     	; 0x1262 <vfprintf+0x336>
    1274:	b2 14       	cp	r11, r2
    1276:	18 f4       	brcc	.+6      	; 0x127e <vfprintf+0x352>
    1278:	2b 18       	sub	r2, r11
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <vfprintf+0x354>
    127c:	98 2c       	mov	r9, r8
    127e:	21 2c       	mov	r2, r1
    1280:	a4 fe       	sbrs	r10, 4
    1282:	10 c0       	rjmp	.+32     	; 0x12a4 <vfprintf+0x378>
    1284:	b6 01       	movw	r22, r12
    1286:	80 e3       	ldi	r24, 0x30	; 48
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    128e:	a2 fe       	sbrs	r10, 2
    1290:	17 c0       	rjmp	.+46     	; 0x12c0 <vfprintf+0x394>
    1292:	a1 fc       	sbrc	r10, 1
    1294:	03 c0       	rjmp	.+6      	; 0x129c <vfprintf+0x370>
    1296:	88 e7       	ldi	r24, 0x78	; 120
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <vfprintf+0x374>
    129c:	88 e5       	ldi	r24, 0x58	; 88
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	b6 01       	movw	r22, r12
    12a2:	0c c0       	rjmp	.+24     	; 0x12bc <vfprintf+0x390>
    12a4:	8a 2d       	mov	r24, r10
    12a6:	86 78       	andi	r24, 0x86	; 134
    12a8:	59 f0       	breq	.+22     	; 0x12c0 <vfprintf+0x394>
    12aa:	a1 fe       	sbrs	r10, 1
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <vfprintf+0x386>
    12ae:	8b e2       	ldi	r24, 0x2B	; 43
    12b0:	01 c0       	rjmp	.+2      	; 0x12b4 <vfprintf+0x388>
    12b2:	80 e2       	ldi	r24, 0x20	; 32
    12b4:	a7 fc       	sbrc	r10, 7
    12b6:	8d e2       	ldi	r24, 0x2D	; 45
    12b8:	b6 01       	movw	r22, r12
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    12c0:	89 14       	cp	r8, r9
    12c2:	38 f4       	brcc	.+14     	; 0x12d2 <vfprintf+0x3a6>
    12c4:	b6 01       	movw	r22, r12
    12c6:	80 e3       	ldi	r24, 0x30	; 48
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    12ce:	9a 94       	dec	r9
    12d0:	f7 cf       	rjmp	.-18     	; 0x12c0 <vfprintf+0x394>
    12d2:	8a 94       	dec	r8
    12d4:	f3 01       	movw	r30, r6
    12d6:	e8 0d       	add	r30, r8
    12d8:	f1 1d       	adc	r31, r1
    12da:	80 81       	ld	r24, Z
    12dc:	b6 01       	movw	r22, r12
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    12e4:	81 10       	cpse	r8, r1
    12e6:	f5 cf       	rjmp	.-22     	; 0x12d2 <vfprintf+0x3a6>
    12e8:	22 20       	and	r2, r2
    12ea:	09 f4       	brne	.+2      	; 0x12ee <vfprintf+0x3c2>
    12ec:	42 ce       	rjmp	.-892    	; 0xf72 <vfprintf+0x46>
    12ee:	b6 01       	movw	r22, r12
    12f0:	80 e2       	ldi	r24, 0x20	; 32
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	0e 94 b0 09 	call	0x1360	; 0x1360 <fputc>
    12f8:	2a 94       	dec	r2
    12fa:	f6 cf       	rjmp	.-20     	; 0x12e8 <vfprintf+0x3bc>
    12fc:	f6 01       	movw	r30, r12
    12fe:	86 81       	ldd	r24, Z+6	; 0x06
    1300:	97 81       	ldd	r25, Z+7	; 0x07
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <vfprintf+0x3dc>
    1304:	8f ef       	ldi	r24, 0xFF	; 255
    1306:	9f ef       	ldi	r25, 0xFF	; 255
    1308:	2b 96       	adiw	r28, 0x0b	; 11
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	df 90       	pop	r13
    131c:	cf 90       	pop	r12
    131e:	bf 90       	pop	r11
    1320:	af 90       	pop	r10
    1322:	9f 90       	pop	r9
    1324:	8f 90       	pop	r8
    1326:	7f 90       	pop	r7
    1328:	6f 90       	pop	r6
    132a:	5f 90       	pop	r5
    132c:	4f 90       	pop	r4
    132e:	3f 90       	pop	r3
    1330:	2f 90       	pop	r2
    1332:	08 95       	ret

00001334 <strnlen_P>:
    1334:	fc 01       	movw	r30, r24
    1336:	05 90       	lpm	r0, Z+
    1338:	61 50       	subi	r22, 0x01	; 1
    133a:	70 40       	sbci	r23, 0x00	; 0
    133c:	01 10       	cpse	r0, r1
    133e:	d8 f7       	brcc	.-10     	; 0x1336 <strnlen_P+0x2>
    1340:	80 95       	com	r24
    1342:	90 95       	com	r25
    1344:	8e 0f       	add	r24, r30
    1346:	9f 1f       	adc	r25, r31
    1348:	08 95       	ret

0000134a <strnlen>:
    134a:	fc 01       	movw	r30, r24
    134c:	61 50       	subi	r22, 0x01	; 1
    134e:	70 40       	sbci	r23, 0x00	; 0
    1350:	01 90       	ld	r0, Z+
    1352:	01 10       	cpse	r0, r1
    1354:	d8 f7       	brcc	.-10     	; 0x134c <strnlen+0x2>
    1356:	80 95       	com	r24
    1358:	90 95       	com	r25
    135a:	8e 0f       	add	r24, r30
    135c:	9f 1f       	adc	r25, r31
    135e:	08 95       	ret

00001360 <fputc>:
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	fb 01       	movw	r30, r22
    136a:	23 81       	ldd	r18, Z+3	; 0x03
    136c:	21 fd       	sbrc	r18, 1
    136e:	03 c0       	rjmp	.+6      	; 0x1376 <fputc+0x16>
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	9f ef       	ldi	r25, 0xFF	; 255
    1374:	2c c0       	rjmp	.+88     	; 0x13ce <fputc+0x6e>
    1376:	22 ff       	sbrs	r18, 2
    1378:	16 c0       	rjmp	.+44     	; 0x13a6 <fputc+0x46>
    137a:	46 81       	ldd	r20, Z+6	; 0x06
    137c:	57 81       	ldd	r21, Z+7	; 0x07
    137e:	24 81       	ldd	r18, Z+4	; 0x04
    1380:	35 81       	ldd	r19, Z+5	; 0x05
    1382:	42 17       	cp	r20, r18
    1384:	53 07       	cpc	r21, r19
    1386:	44 f4       	brge	.+16     	; 0x1398 <fputc+0x38>
    1388:	a0 81       	ld	r26, Z
    138a:	b1 81       	ldd	r27, Z+1	; 0x01
    138c:	9d 01       	movw	r18, r26
    138e:	2f 5f       	subi	r18, 0xFF	; 255
    1390:	3f 4f       	sbci	r19, 0xFF	; 255
    1392:	20 83       	st	Z, r18
    1394:	31 83       	std	Z+1, r19	; 0x01
    1396:	8c 93       	st	X, r24
    1398:	26 81       	ldd	r18, Z+6	; 0x06
    139a:	37 81       	ldd	r19, Z+7	; 0x07
    139c:	2f 5f       	subi	r18, 0xFF	; 255
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	26 83       	std	Z+6, r18	; 0x06
    13a2:	37 83       	std	Z+7, r19	; 0x07
    13a4:	14 c0       	rjmp	.+40     	; 0x13ce <fputc+0x6e>
    13a6:	8b 01       	movw	r16, r22
    13a8:	ec 01       	movw	r28, r24
    13aa:	fb 01       	movw	r30, r22
    13ac:	00 84       	ldd	r0, Z+8	; 0x08
    13ae:	f1 85       	ldd	r31, Z+9	; 0x09
    13b0:	e0 2d       	mov	r30, r0
    13b2:	19 95       	eicall
    13b4:	89 2b       	or	r24, r25
    13b6:	e1 f6       	brne	.-72     	; 0x1370 <fputc+0x10>
    13b8:	d8 01       	movw	r26, r16
    13ba:	16 96       	adiw	r26, 0x06	; 6
    13bc:	8d 91       	ld	r24, X+
    13be:	9c 91       	ld	r25, X
    13c0:	17 97       	sbiw	r26, 0x07	; 7
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	16 96       	adiw	r26, 0x06	; 6
    13c6:	8d 93       	st	X+, r24
    13c8:	9c 93       	st	X, r25
    13ca:	17 97       	sbiw	r26, 0x07	; 7
    13cc:	ce 01       	movw	r24, r28
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	08 95       	ret

000013d8 <__ultoa_invert>:
    13d8:	fa 01       	movw	r30, r20
    13da:	aa 27       	eor	r26, r26
    13dc:	28 30       	cpi	r18, 0x08	; 8
    13de:	51 f1       	breq	.+84     	; 0x1434 <__ultoa_invert+0x5c>
    13e0:	20 31       	cpi	r18, 0x10	; 16
    13e2:	81 f1       	breq	.+96     	; 0x1444 <__ultoa_invert+0x6c>
    13e4:	e8 94       	clt
    13e6:	6f 93       	push	r22
    13e8:	6e 7f       	andi	r22, 0xFE	; 254
    13ea:	6e 5f       	subi	r22, 0xFE	; 254
    13ec:	7f 4f       	sbci	r23, 0xFF	; 255
    13ee:	8f 4f       	sbci	r24, 0xFF	; 255
    13f0:	9f 4f       	sbci	r25, 0xFF	; 255
    13f2:	af 4f       	sbci	r26, 0xFF	; 255
    13f4:	b1 e0       	ldi	r27, 0x01	; 1
    13f6:	3e d0       	rcall	.+124    	; 0x1474 <__ultoa_invert+0x9c>
    13f8:	b4 e0       	ldi	r27, 0x04	; 4
    13fa:	3c d0       	rcall	.+120    	; 0x1474 <__ultoa_invert+0x9c>
    13fc:	67 0f       	add	r22, r23
    13fe:	78 1f       	adc	r23, r24
    1400:	89 1f       	adc	r24, r25
    1402:	9a 1f       	adc	r25, r26
    1404:	a1 1d       	adc	r26, r1
    1406:	68 0f       	add	r22, r24
    1408:	79 1f       	adc	r23, r25
    140a:	8a 1f       	adc	r24, r26
    140c:	91 1d       	adc	r25, r1
    140e:	a1 1d       	adc	r26, r1
    1410:	6a 0f       	add	r22, r26
    1412:	71 1d       	adc	r23, r1
    1414:	81 1d       	adc	r24, r1
    1416:	91 1d       	adc	r25, r1
    1418:	a1 1d       	adc	r26, r1
    141a:	20 d0       	rcall	.+64     	; 0x145c <__ultoa_invert+0x84>
    141c:	09 f4       	brne	.+2      	; 0x1420 <__ultoa_invert+0x48>
    141e:	68 94       	set
    1420:	3f 91       	pop	r19
    1422:	2a e0       	ldi	r18, 0x0A	; 10
    1424:	26 9f       	mul	r18, r22
    1426:	11 24       	eor	r1, r1
    1428:	30 19       	sub	r19, r0
    142a:	30 5d       	subi	r19, 0xD0	; 208
    142c:	31 93       	st	Z+, r19
    142e:	de f6       	brtc	.-74     	; 0x13e6 <__ultoa_invert+0xe>
    1430:	cf 01       	movw	r24, r30
    1432:	08 95       	ret
    1434:	46 2f       	mov	r20, r22
    1436:	47 70       	andi	r20, 0x07	; 7
    1438:	40 5d       	subi	r20, 0xD0	; 208
    143a:	41 93       	st	Z+, r20
    143c:	b3 e0       	ldi	r27, 0x03	; 3
    143e:	0f d0       	rcall	.+30     	; 0x145e <__ultoa_invert+0x86>
    1440:	c9 f7       	brne	.-14     	; 0x1434 <__ultoa_invert+0x5c>
    1442:	f6 cf       	rjmp	.-20     	; 0x1430 <__ultoa_invert+0x58>
    1444:	46 2f       	mov	r20, r22
    1446:	4f 70       	andi	r20, 0x0F	; 15
    1448:	40 5d       	subi	r20, 0xD0	; 208
    144a:	4a 33       	cpi	r20, 0x3A	; 58
    144c:	18 f0       	brcs	.+6      	; 0x1454 <__ultoa_invert+0x7c>
    144e:	49 5d       	subi	r20, 0xD9	; 217
    1450:	31 fd       	sbrc	r19, 1
    1452:	40 52       	subi	r20, 0x20	; 32
    1454:	41 93       	st	Z+, r20
    1456:	02 d0       	rcall	.+4      	; 0x145c <__ultoa_invert+0x84>
    1458:	a9 f7       	brne	.-22     	; 0x1444 <__ultoa_invert+0x6c>
    145a:	ea cf       	rjmp	.-44     	; 0x1430 <__ultoa_invert+0x58>
    145c:	b4 e0       	ldi	r27, 0x04	; 4
    145e:	a6 95       	lsr	r26
    1460:	97 95       	ror	r25
    1462:	87 95       	ror	r24
    1464:	77 95       	ror	r23
    1466:	67 95       	ror	r22
    1468:	ba 95       	dec	r27
    146a:	c9 f7       	brne	.-14     	; 0x145e <__ultoa_invert+0x86>
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	61 05       	cpc	r22, r1
    1470:	71 05       	cpc	r23, r1
    1472:	08 95       	ret
    1474:	9b 01       	movw	r18, r22
    1476:	ac 01       	movw	r20, r24
    1478:	0a 2e       	mov	r0, r26
    147a:	06 94       	lsr	r0
    147c:	57 95       	ror	r21
    147e:	47 95       	ror	r20
    1480:	37 95       	ror	r19
    1482:	27 95       	ror	r18
    1484:	ba 95       	dec	r27
    1486:	c9 f7       	brne	.-14     	; 0x147a <__ultoa_invert+0xa2>
    1488:	62 0f       	add	r22, r18
    148a:	73 1f       	adc	r23, r19
    148c:	84 1f       	adc	r24, r20
    148e:	95 1f       	adc	r25, r21
    1490:	a0 1d       	adc	r26, r0
    1492:	08 95       	ret

00001494 <_exit>:
    1494:	f8 94       	cli

00001496 <__stop_program>:
    1496:	ff cf       	rjmp	.-2      	; 0x1496 <__stop_program>
